// Copyright (C) 2019 Czech Technical University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
//     * Neither the name of Czech Technical University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// Please contact the author of this library if you have any questions.
// Author: Daniel Barath (barath.daniel@sztaki.mta.hu)
#pragma once

#include "solver_engine.h"
#include "fundamental_estimator.h"

namespace gcransac
{
	namespace estimator
	{
		namespace solver
		{
			// This is the estimator class for estimating a homography matrix between two images. A model estimation method and error calculation method are implemented
			class EssentialMatrixOne6PC : public SolverEngine
			{
			public:
				EssentialMatrixOne6PC()
				{
				}

				~EssentialMatrixOne6PC()
				{
				}

				// Determines if there is a chance of returning multiple models
				// when function 'estimateModel' is applied.
				static constexpr bool returnMultipleModels()
				{
					return maximumSolutions() > 1;
				}

				static constexpr size_t maximumSolutions()
				{
					return 9;
				}

				// The minimum number of points required for the estimation
				static constexpr size_t sampleSize()
				{
					return 6;
				}

				static constexpr bool acceptsPriorModel() 
				{
					return false;
				}

				static const char *getName()
				{
					return "E1f-6PT";
				}

				static constexpr bool needsGravity()
				{
					return true;
				}

				void setGravity(const Eigen::Matrix3d &gravity_source_,
								const Eigen::Matrix3d &gravity_destination_)
				{
				}

				OLGA_INLINE bool estimateModel(
					const cv::Mat &data_,					 // The set of data points
					const size_t *sample_,					 // The sample used for the estimation
					size_t sample_number_,					 // The size of the sample
					std::vector<Model> &models_,			 // The estimated model parameters
					const double *weights_ = nullptr) const; // The weight for each point

			protected:
				Eigen::MatrixXcd solver_6pt_onefocal(const Eigen::VectorXd &data_) const;
			};

			OLGA_INLINE bool EssentialMatrixOne6PC::estimateModel(
				const cv::Mat &data_,
				const size_t *sample_,
				size_t sample_number_,
				std::vector<Model> &models_,
				const double *weights_) const
			{
				Eigen::MatrixXd coefficients(sample_number_, 9);
				const double *data_ptr = reinterpret_cast<double *>(data_.data);
				const int cols = data_.cols;
				double c[4];
				double t0, t1, t2;
				int i, n;

				// Form a linear system: i-th row of A(=a) represents
				// the equation: (m2[i], 1)'*F*(m1[i], 1) = 0
				double weight = 1.0;
				for (i = 0; i < 7; i++)
				{
					const int sample_idx = sample_[i];
					const int offset = cols * sample_idx;

					const double
						x0 = data_ptr[offset],
						y0 = data_ptr[offset + 1],
						x1 = data_ptr[offset + 2],
						y1 = data_ptr[offset + 3];

					// If not weighted least-squares is applied
					if (weights_ == nullptr)
					{
						coefficients(i, 0) = x1 * x0;
						coefficients(i, 1) = x1 * y0;
						coefficients(i, 2) = x1;
						coefficients(i, 3) = y1 * x0;
						coefficients(i, 4) = y1 * y0;
						coefficients(i, 5) = y1;
						coefficients(i, 6) = x0;
						coefficients(i, 7) = y0;
						coefficients(i, 8) = 1;
					}
					else
					{
						weight = weights_[sample_idx];

						// Precalculate these values to avoid calculating them multiple times
						const double
							weight_times_x0 = weight * x0,
							weight_times_y0 = weight * y0,
							weight_times_x1 = weight * x1,
							weight_times_y1 = weight * y1;

						coefficients(i, 0) = weight_times_x1 * x0;
						coefficients(i, 1) = weight_times_x1 * y0;
						coefficients(i, 2) = weight_times_x1;
						coefficients(i, 3) = weight_times_y1 * x0;
						coefficients(i, 4) = weight_times_y1 * y0;
						coefficients(i, 5) = weight_times_y1;
						coefficients(i, 6) = weight_times_x0;
						coefficients(i, 7) = weight_times_y0;
						coefficients(i, 8) = weight;
					}
				}

				// A*(f11 f12 ... f33)' = 0 is singular (7 equations for 9 variables), so
				// the solution is linear subspace of dimensionality 2.
				// => use the last two singular std::vectors as a basis of the space
				// (according to SVD properties)
				Eigen::JacobiSVD<Eigen::MatrixXd> svd(
					// Theoretically, it would be faster to apply SVD only to matrix coefficients, but
					// multiplication is faster than SVD in the Eigen library. Therefore, it is faster
					// to apply SVD to a smaller matrix.
					coefficients.transpose() * coefficients,
					Eigen::ComputeFullV);

				Eigen::Matrix<double, 9, 1> f0 =
					svd.matrixV().block<9, 1>(0, 6);

				Eigen::Matrix<double, 9, 1> f1 =
					svd.matrixV().block<9, 1>(0, 7);
				Eigen::Matrix<double, 9, 1> f2 =
					svd.matrixV().block<9, 1>(0, 8);

				Eigen::Matrix<double, 27, 1> data2;
				data2 << f0, f1, f2;

				Eigen::MatrixXcd sols = solver_6pt_onefocal(data2);

				

				for (size_t k = 0; k < 4; ++k)
				{
					if (sols(0, k).imag() > std::numeric_limits<double>::epsilon() ||
						sols(1, k).imag() > std::numeric_limits<double>::epsilon())
						continue;

					Eigen::MatrixXd M = sols(0, k).real() * f0 + sols(1, k).real() * f1 + f2;

					

					Eigen::Matrix<double, 3, 3> F;
					F << M(0), M(1), M(2),
						M(3), M(4), M(5),
						M(6), M(7), M(8);

					double focal2 = (F(1,2)*F(2,0)*F(2,0)+F(1,2)*F(2,1)*F(2,1)-2.0*F(1,0)*F(2,0)*F(2,2)-2.0*F(1,1)*F(2,1)*F(2,2)-F(1,2)*F(2,2)*F(2,2))/(2.0*F(0,0)*F(0,2)*F(1,0)+2.0*F(0,1)*F(0,2)*F(1,1)-F(1,2)*(F(0,0)*F(0,0)+F(0,1)*F(0,1)-F(0,2)*F(0,2)-F(1,0)*F(1,0)-F(1,1)*F(1,1)-F(1,2)*F(1,2)));
					double focal = sqrt(focal2);
					Eigen::Matrix<double, 3, 3> Kin;
					Kin << focal, 0, 0,
						0, focal, 0,
						0, 0, 1;

					Eigen::Matrix<double, 3, 3> E;
					E = Kin*F;

					Model model;

					model.descriptor = Eigen::MatrixXd(3, 4);
					model.descriptor.block<3, 3>(0, 0) = E; // full essential matrix
					model.descriptor(2, 3) = focal;	

					models_.push_back(model);
				}






				return true;
			}



			Eigen::MatrixXcd EssentialMatrixOne6PC::solver_6pt_onefocal(const Eigen::VectorXd &data_) const
			{
				using namespace Eigen;
				// Action =  y
				// Quotient ring basis (V) = 1,x,x^2,x^2*y,x*y,x*y^2,y,y^2,y^3,
				// Available monomials (RR*V) = x^2*y^2,x*y^3,y^4,1,x,x^2,x^2*y,x*y,x*y^2,y,y^2,y^3,

				const double *d = data_.data();
				Eigen::VectorXd coeffs(55);
				coeffs[0] = d[2] * d[4] * d[6] - d[1] * d[5] * d[6] - d[2] * d[3] * d[7] + d[0] * d[5] * d[7] + d[1] * d[3] * d[8] - d[0] * d[4] * d[8];
				coeffs[1] = d[5] * d[7] * d[9] - d[4] * d[8] * d[9] - d[5] * d[6] * d[10] + d[3] * d[8] * d[10] + d[4] * d[6] * d[11] - d[3] * d[7] * d[11] - d[2] * d[7] * d[12] + d[1] * d[8] * d[12] + d[2] * d[6] * d[13] - d[0] * d[8] * d[13] - d[1] * d[6] * d[14] + d[0] * d[7] * d[14] + d[2] * d[4] * d[15] - d[1] * d[5] * d[15] - d[2] * d[3] * d[16] + d[0] * d[5] * d[16] + d[1] * d[3] * d[17] - d[0] * d[4] * d[17];
				coeffs[2] = d[8] * d[10] * d[12] - d[7] * d[11] * d[12] - d[8] * d[9] * d[13] + d[6] * d[11] * d[13] + d[7] * d[9] * d[14] - d[6] * d[10] * d[14] - d[5] * d[10] * d[15] + d[4] * d[11] * d[15] + d[2] * d[13] * d[15] - d[1] * d[14] * d[15] + d[5] * d[9] * d[16] - d[3] * d[11] * d[16] - d[2] * d[12] * d[16] + d[0] * d[14] * d[16] - d[4] * d[9] * d[17] + d[3] * d[10] * d[17] + d[1] * d[12] * d[17] - d[0] * d[13] * d[17];
				coeffs[3] = d[11] * d[13] * d[15] - d[10] * d[14] * d[15] - d[11] * d[12] * d[16] + d[9] * d[14] * d[16] + d[10] * d[12] * d[17] - d[9] * d[13] * d[17];
				coeffs[4] = d[5] * d[7] * d[18] - d[4] * d[8] * d[18] - d[5] * d[6] * d[19] + d[3] * d[8] * d[19] + d[4] * d[6] * d[20] - d[3] * d[7] * d[20] - d[2] * d[7] * d[21] + d[1] * d[8] * d[21] + d[2] * d[6] * d[22] - d[0] * d[8] * d[22] - d[1] * d[6] * d[23] + d[0] * d[7] * d[23] + d[2] * d[4] * d[24] - d[1] * d[5] * d[24] - d[2] * d[3] * d[25] + d[0] * d[5] * d[25] + d[1] * d[3] * d[26] - d[0] * d[4] * d[26];
				coeffs[5] = -d[8] * d[13] * d[18] + d[7] * d[14] * d[18] + d[5] * d[16] * d[18] - d[4] * d[17] * d[18] + d[8] * d[12] * d[19] - d[6] * d[14] * d[19] - d[5] * d[15] * d[19] + d[3] * d[17] * d[19] - d[7] * d[12] * d[20] + d[6] * d[13] * d[20] + d[4] * d[15] * d[20] - d[3] * d[16] * d[20] + d[8] * d[10] * d[21] - d[7] * d[11] * d[21] - d[2] * d[16] * d[21] + d[1] * d[17] * d[21] - d[8] * d[9] * d[22] + d[6] * d[11] * d[22] + d[2] * d[15] * d[22] - d[0] * d[17] * d[22] + d[7] * d[9] * d[23] - d[6] * d[10] * d[23] - d[1] * d[15] * d[23] + d[0] * d[16] * d[23] - d[5] * d[10] * d[24] + d[4] * d[11] * d[24] + d[2] * d[13] * d[24] - d[1] * d[14] * d[24] + d[5] * d[9] * d[25] - d[3] * d[11] * d[25] - d[2] * d[12] * d[25] + d[0] * d[14] * d[25] - d[4] * d[9] * d[26] + d[3] * d[10] * d[26] + d[1] * d[12] * d[26] - d[0] * d[13] * d[26];
				coeffs[6] = d[14] * d[16] * d[18] - d[13] * d[17] * d[18] - d[14] * d[15] * d[19] + d[12] * d[17] * d[19] + d[13] * d[15] * d[20] - d[12] * d[16] * d[20] - d[11] * d[16] * d[21] + d[10] * d[17] * d[21] + d[11] * d[15] * d[22] - d[9] * d[17] * d[22] - d[10] * d[15] * d[23] + d[9] * d[16] * d[23] + d[11] * d[13] * d[24] - d[10] * d[14] * d[24] - d[11] * d[12] * d[25] + d[9] * d[14] * d[25] + d[10] * d[12] * d[26] - d[9] * d[13] * d[26];
				coeffs[7] = d[8] * d[19] * d[21] - d[7] * d[20] * d[21] - d[8] * d[18] * d[22] + d[6] * d[20] * d[22] + d[7] * d[18] * d[23] - d[6] * d[19] * d[23] - d[5] * d[19] * d[24] + d[4] * d[20] * d[24] + d[2] * d[22] * d[24] - d[1] * d[23] * d[24] + d[5] * d[18] * d[25] - d[3] * d[20] * d[25] - d[2] * d[21] * d[25] + d[0] * d[23] * d[25] - d[4] * d[18] * d[26] + d[3] * d[19] * d[26] + d[1] * d[21] * d[26] - d[0] * d[22] * d[26];
				coeffs[8] = d[17] * d[19] * d[21] - d[16] * d[20] * d[21] - d[17] * d[18] * d[22] + d[15] * d[20] * d[22] + d[16] * d[18] * d[23] - d[15] * d[19] * d[23] - d[14] * d[19] * d[24] + d[13] * d[20] * d[24] + d[11] * d[22] * d[24] - d[10] * d[23] * d[24] + d[14] * d[18] * d[25] - d[12] * d[20] * d[25] - d[11] * d[21] * d[25] + d[9] * d[23] * d[25] - d[13] * d[18] * d[26] + d[12] * d[19] * d[26] + d[10] * d[21] * d[26] - d[9] * d[22] * d[26];
				coeffs[9] = d[20] * d[22] * d[24] - d[19] * d[23] * d[24] - d[20] * d[21] * d[25] + d[18] * d[23] * d[25] + d[19] * d[21] * d[26] - d[18] * d[22] * d[26];
				coeffs[10] = d[0] * d[2] * d[6] * d[7] + d[3] * d[5] * d[6] * d[7] + d[1] * d[2] * std::pow(d[7], 2) + d[4] * d[5] * std::pow(d[7], 2) - d[0] * d[1] * d[6] * d[8] - d[3] * d[4] * d[6] * d[8] - std::pow(d[1], 2) * d[7] * d[8] + std::pow(d[2], 2) * d[7] * d[8] - std::pow(d[4], 2) * d[7] * d[8] + std::pow(d[5], 2) * d[7] * d[8] - d[1] * d[2] * std::pow(d[8], 2) - d[4] * d[5] * std::pow(d[8], 2);
				coeffs[11] = d[2] * d[6] * d[7] * d[9] - d[1] * d[6] * d[8] * d[9] + d[2] * std::pow(d[7], 2) * d[10] - d[0] * d[6] * d[8] * d[10] - 2 * d[1] * d[7] * d[8] * d[10] - d[2] * std::pow(d[8], 2) * d[10] + d[0] * d[6] * d[7] * d[11] + d[1] * std::pow(d[7], 2) * d[11] + 2 * d[2] * d[7] * d[8] * d[11] - d[1] * std::pow(d[8], 2) * d[11] + d[5] * d[6] * d[7] * d[12] - d[4] * d[6] * d[8] * d[12] + d[5] * std::pow(d[7], 2) * d[13] - d[3] * d[6] * d[8] * d[13] - 2 * d[4] * d[7] * d[8] * d[13] - d[5] * std::pow(d[8], 2) * d[13] + d[3] * d[6] * d[7] * d[14] + d[4] * std::pow(d[7], 2) * d[14] + 2 * d[5] * d[7] * d[8] * d[14] - d[4] * std::pow(d[8], 2) * d[14] + d[0] * d[2] * d[7] * d[15] + d[3] * d[5] * d[7] * d[15] - d[0] * d[1] * d[8] * d[15] - d[3] * d[4] * d[8] * d[15] + d[0] * d[2] * d[6] * d[16] + d[3] * d[5] * d[6] * d[16] + 2 * d[1] * d[2] * d[7] * d[16] + 2 * d[4] * d[5] * d[7] * d[16] - std::pow(d[1], 2) * d[8] * d[16] + std::pow(d[2], 2) * d[8] * d[16] - std::pow(d[4], 2) * d[8] * d[16] + std::pow(d[5], 2) * d[8] * d[16] - d[0] * d[1] * d[6] * d[17] - d[3] * d[4] * d[6] * d[17] - std::pow(d[1], 2) * d[7] * d[17] + std::pow(d[2], 2) * d[7] * d[17] - std::pow(d[4], 2) * d[7] * d[17] + std::pow(d[5], 2) * d[7] * d[17] - 2 * d[1] * d[2] * d[8] * d[17] - 2 * d[4] * d[5] * d[8] * d[17];
				coeffs[12] = -d[6] * d[8] * d[9] * d[10] - d[7] * d[8] * std::pow(d[10], 2) + d[6] * d[7] * d[9] * d[11] + std::pow(d[7], 2) * d[10] * d[11] - std::pow(d[8], 2) * d[10] * d[11] + d[7] * d[8] * std::pow(d[11], 2) - d[6] * d[8] * d[12] * d[13] - d[7] * d[8] * std::pow(d[13], 2) + d[6] * d[7] * d[12] * d[14] + std::pow(d[7], 2) * d[13] * d[14] - std::pow(d[8], 2) * d[13] * d[14] + d[7] * d[8] * std::pow(d[14], 2) + d[2] * d[7] * d[9] * d[15] - d[1] * d[8] * d[9] * d[15] - d[0] * d[8] * d[10] * d[15] + d[0] * d[7] * d[11] * d[15] + d[5] * d[7] * d[12] * d[15] - d[4] * d[8] * d[12] * d[15] - d[3] * d[8] * d[13] * d[15] + d[3] * d[7] * d[14] * d[15] + d[2] * d[6] * d[9] * d[16] + 2 * d[2] * d[7] * d[10] * d[16] - 2 * d[1] * d[8] * d[10] * d[16] + d[0] * d[6] * d[11] * d[16] + 2 * d[1] * d[7] * d[11] * d[16] + 2 * d[2] * d[8] * d[11] * d[16] + d[5] * d[6] * d[12] * d[16] + 2 * d[5] * d[7] * d[13] * d[16] - 2 * d[4] * d[8] * d[13] * d[16] + d[3] * d[6] * d[14] * d[16] + 2 * d[4] * d[7] * d[14] * d[16] + 2 * d[5] * d[8] * d[14] * d[16] + d[0] * d[2] * d[15] * d[16] + d[3] * d[5] * d[15] * d[16] + d[1] * d[2] * std::pow(d[16], 2) + d[4] * d[5] * std::pow(d[16], 2) - d[1] * d[6] * d[9] * d[17] - d[0] * d[6] * d[10] * d[17] - 2 * d[1] * d[7] * d[10] * d[17] - 2 * d[2] * d[8] * d[10] * d[17] + 2 * d[2] * d[7] * d[11] * d[17] - 2 * d[1] * d[8] * d[11] * d[17] - d[4] * d[6] * d[12] * d[17] - d[3] * d[6] * d[13] * d[17] - 2 * d[4] * d[7] * d[13] * d[17] - 2 * d[5] * d[8] * d[13] * d[17] + 2 * d[5] * d[7] * d[14] * d[17] - 2 * d[4] * d[8] * d[14] * d[17] - d[0] * d[1] * d[15] * d[17] - d[3] * d[4] * d[15] * d[17] - std::pow(d[1], 2) * d[16] * d[17] + std::pow(d[2], 2) * d[16] * d[17] - std::pow(d[4], 2) * d[16] * d[17] + std::pow(d[5], 2) * d[16] * d[17] - d[1] * d[2] * std::pow(d[17], 2) - d[4] * d[5] * std::pow(d[17], 2);
				coeffs[13] = -d[8] * d[9] * d[10] * d[15] + d[7] * d[9] * d[11] * d[15] - d[8] * d[12] * d[13] * d[15] + d[7] * d[12] * d[14] * d[15] - d[8] * std::pow(d[10], 2) * d[16] + d[6] * d[9] * d[11] * d[16] + 2 * d[7] * d[10] * d[11] * d[16] + d[8] * std::pow(d[11], 2) * d[16] - d[8] * std::pow(d[13], 2) * d[16] + d[6] * d[12] * d[14] * d[16] + 2 * d[7] * d[13] * d[14] * d[16] + d[8] * std::pow(d[14], 2) * d[16] + d[2] * d[9] * d[15] * d[16] + d[0] * d[11] * d[15] * d[16] + d[5] * d[12] * d[15] * d[16] + d[3] * d[14] * d[15] * d[16] + d[2] * d[10] * std::pow(d[16], 2) + d[1] * d[11] * std::pow(d[16], 2) + d[5] * d[13] * std::pow(d[16], 2) + d[4] * d[14] * std::pow(d[16], 2) - d[6] * d[9] * d[10] * d[17] - d[7] * std::pow(d[10], 2) * d[17] - 2 * d[8] * d[10] * d[11] * d[17] + d[7] * std::pow(d[11], 2) * d[17] - d[6] * d[12] * d[13] * d[17] - d[7] * std::pow(d[13], 2) * d[17] - 2 * d[8] * d[13] * d[14] * d[17] + d[7] * std::pow(d[14], 2) * d[17] - d[1] * d[9] * d[15] * d[17] - d[0] * d[10] * d[15] * d[17] - d[4] * d[12] * d[15] * d[17] - d[3] * d[13] * d[15] * d[17] - 2 * d[1] * d[10] * d[16] * d[17] + 2 * d[2] * d[11] * d[16] * d[17] - 2 * d[4] * d[13] * d[16] * d[17] + 2 * d[5] * d[14] * d[16] * d[17] - d[2] * d[10] * std::pow(d[17], 2) - d[1] * d[11] * std::pow(d[17], 2) - d[5] * d[13] * std::pow(d[17], 2) - d[4] * d[14] * std::pow(d[17], 2);
				coeffs[14] = d[9] * d[11] * d[15] * d[16] + d[12] * d[14] * d[15] * d[16] + d[10] * d[11] * std::pow(d[16], 2) + d[13] * d[14] * std::pow(d[16], 2) - d[9] * d[10] * d[15] * d[17] - d[12] * d[13] * d[15] * d[17] - std::pow(d[10], 2) * d[16] * d[17] + std::pow(d[11], 2) * d[16] * d[17] - std::pow(d[13], 2) * d[16] * d[17] + std::pow(d[14], 2) * d[16] * d[17] - d[10] * d[11] * std::pow(d[17], 2) - d[13] * d[14] * std::pow(d[17], 2);
				coeffs[15] = d[2] * d[6] * d[7] * d[18] - d[1] * d[6] * d[8] * d[18] + d[2] * std::pow(d[7], 2) * d[19] - d[0] * d[6] * d[8] * d[19] - 2 * d[1] * d[7] * d[8] * d[19] - d[2] * std::pow(d[8], 2) * d[19] + d[0] * d[6] * d[7] * d[20] + d[1] * std::pow(d[7], 2) * d[20] + 2 * d[2] * d[7] * d[8] * d[20] - d[1] * std::pow(d[8], 2) * d[20] + d[5] * d[6] * d[7] * d[21] - d[4] * d[6] * d[8] * d[21] + d[5] * std::pow(d[7], 2) * d[22] - d[3] * d[6] * d[8] * d[22] - 2 * d[4] * d[7] * d[8] * d[22] - d[5] * std::pow(d[8], 2) * d[22] + d[3] * d[6] * d[7] * d[23] + d[4] * std::pow(d[7], 2) * d[23] + 2 * d[5] * d[7] * d[8] * d[23] - d[4] * std::pow(d[8], 2) * d[23] + d[0] * d[2] * d[7] * d[24] + d[3] * d[5] * d[7] * d[24] - d[0] * d[1] * d[8] * d[24] - d[3] * d[4] * d[8] * d[24] + d[0] * d[2] * d[6] * d[25] + d[3] * d[5] * d[6] * d[25] + 2 * d[1] * d[2] * d[7] * d[25] + 2 * d[4] * d[5] * d[7] * d[25] - std::pow(d[1], 2) * d[8] * d[25] + std::pow(d[2], 2) * d[8] * d[25] - std::pow(d[4], 2) * d[8] * d[25] + std::pow(d[5], 2) * d[8] * d[25] - d[0] * d[1] * d[6] * d[26] - d[3] * d[4] * d[6] * d[26] - std::pow(d[1], 2) * d[7] * d[26] + std::pow(d[2], 2) * d[7] * d[26] - std::pow(d[4], 2) * d[7] * d[26] + std::pow(d[5], 2) * d[7] * d[26] - 2 * d[1] * d[2] * d[8] * d[26] - 2 * d[4] * d[5] * d[8] * d[26];
				coeffs[16] = -d[6] * d[8] * d[10] * d[18] + d[6] * d[7] * d[11] * d[18] + d[2] * d[7] * d[15] * d[18] - d[1] * d[8] * d[15] * d[18] + d[2] * d[6] * d[16] * d[18] - d[1] * d[6] * d[17] * d[18] - d[6] * d[8] * d[9] * d[19] - 2 * d[7] * d[8] * d[10] * d[19] + std::pow(d[7], 2) * d[11] * d[19] - std::pow(d[8], 2) * d[11] * d[19] - d[0] * d[8] * d[15] * d[19] + 2 * d[2] * d[7] * d[16] * d[19] - 2 * d[1] * d[8] * d[16] * d[19] - d[0] * d[6] * d[17] * d[19] - 2 * d[1] * d[7] * d[17] * d[19] - 2 * d[2] * d[8] * d[17] * d[19] + d[6] * d[7] * d[9] * d[20] + std::pow(d[7], 2) * d[10] * d[20] - std::pow(d[8], 2) * d[10] * d[20] + 2 * d[7] * d[8] * d[11] * d[20] + d[0] * d[7] * d[15] * d[20] + d[0] * d[6] * d[16] * d[20] + 2 * d[1] * d[7] * d[16] * d[20] + 2 * d[2] * d[8] * d[16] * d[20] + 2 * d[2] * d[7] * d[17] * d[20] - 2 * d[1] * d[8] * d[17] * d[20] - d[6] * d[8] * d[13] * d[21] + d[6] * d[7] * d[14] * d[21] + d[5] * d[7] * d[15] * d[21] - d[4] * d[8] * d[15] * d[21] + d[5] * d[6] * d[16] * d[21] - d[4] * d[6] * d[17] * d[21] - d[6] * d[8] * d[12] * d[22] - 2 * d[7] * d[8] * d[13] * d[22] + std::pow(d[7], 2) * d[14] * d[22] - std::pow(d[8], 2) * d[14] * d[22] - d[3] * d[8] * d[15] * d[22] + 2 * d[5] * d[7] * d[16] * d[22] - 2 * d[4] * d[8] * d[16] * d[22] - d[3] * d[6] * d[17] * d[22] - 2 * d[4] * d[7] * d[17] * d[22] - 2 * d[5] * d[8] * d[17] * d[22] + d[6] * d[7] * d[12] * d[23] + std::pow(d[7], 2) * d[13] * d[23] - std::pow(d[8], 2) * d[13] * d[23] + 2 * d[7] * d[8] * d[14] * d[23] + d[3] * d[7] * d[15] * d[23] + d[3] * d[6] * d[16] * d[23] + 2 * d[4] * d[7] * d[16] * d[23] + 2 * d[5] * d[8] * d[16] * d[23] + 2 * d[5] * d[7] * d[17] * d[23] - 2 * d[4] * d[8] * d[17] * d[23] + d[2] * d[7] * d[9] * d[24] - d[1] * d[8] * d[9] * d[24] - d[0] * d[8] * d[10] * d[24] + d[0] * d[7] * d[11] * d[24] + d[5] * d[7] * d[12] * d[24] - d[4] * d[8] * d[12] * d[24] - d[3] * d[8] * d[13] * d[24] + d[3] * d[7] * d[14] * d[24] + d[0] * d[2] * d[16] * d[24] + d[3] * d[5] * d[16] * d[24] - d[0] * d[1] * d[17] * d[24] - d[3] * d[4] * d[17] * d[24] + d[2] * d[6] * d[9] * d[25] + 2 * d[2] * d[7] * d[10] * d[25] - 2 * d[1] * d[8] * d[10] * d[25] + d[0] * d[6] * d[11] * d[25] + 2 * d[1] * d[7] * d[11] * d[25] + 2 * d[2] * d[8] * d[11] * d[25] + d[5] * d[6] * d[12] * d[25] + 2 * d[5] * d[7] * d[13] * d[25] - 2 * d[4] * d[8] * d[13] * d[25] + d[3] * d[6] * d[14] * d[25] + 2 * d[4] * d[7] * d[14] * d[25] + 2 * d[5] * d[8] * d[14] * d[25] + d[0] * d[2] * d[15] * d[25] + d[3] * d[5] * d[15] * d[25] + 2 * d[1] * d[2] * d[16] * d[25] + 2 * d[4] * d[5] * d[16] * d[25] - std::pow(d[1], 2) * d[17] * d[25] + std::pow(d[2], 2) * d[17] * d[25] - std::pow(d[4], 2) * d[17] * d[25] + std::pow(d[5], 2) * d[17] * d[25] - d[1] * d[6] * d[9] * d[26] - d[0] * d[6] * d[10] * d[26] - 2 * d[1] * d[7] * d[10] * d[26] - 2 * d[2] * d[8] * d[10] * d[26] + 2 * d[2] * d[7] * d[11] * d[26] - 2 * d[1] * d[8] * d[11] * d[26] - d[4] * d[6] * d[12] * d[26] - d[3] * d[6] * d[13] * d[26] - 2 * d[4] * d[7] * d[13] * d[26] - 2 * d[5] * d[8] * d[13] * d[26] + 2 * d[5] * d[7] * d[14] * d[26] - 2 * d[4] * d[8] * d[14] * d[26] - d[0] * d[1] * d[15] * d[26] - d[3] * d[4] * d[15] * d[26] - std::pow(d[1], 2) * d[16] * d[26] + std::pow(d[2], 2) * d[16] * d[26] - std::pow(d[4], 2) * d[16] * d[26] + std::pow(d[5], 2) * d[16] * d[26] - 2 * d[1] * d[2] * d[17] * d[26] - 2 * d[4] * d[5] * d[17] * d[26];
				coeffs[17] = -d[8] * d[10] * d[15] * d[18] + d[7] * d[11] * d[15] * d[18] + d[6] * d[11] * d[16] * d[18] + d[2] * d[15] * d[16] * d[18] - d[6] * d[10] * d[17] * d[18] - d[1] * d[15] * d[17] * d[18] - d[8] * d[9] * d[15] * d[19] - 2 * d[8] * d[10] * d[16] * d[19] + 2 * d[7] * d[11] * d[16] * d[19] + d[2] * std::pow(d[16], 2) * d[19] - d[6] * d[9] * d[17] * d[19] - 2 * d[7] * d[10] * d[17] * d[19] - 2 * d[8] * d[11] * d[17] * d[19] - d[0] * d[15] * d[17] * d[19] - 2 * d[1] * d[16] * d[17] * d[19] - d[2] * std::pow(d[17], 2) * d[19] + d[7] * d[9] * d[15] * d[20] + d[6] * d[9] * d[16] * d[20] + 2 * d[7] * d[10] * d[16] * d[20] + 2 * d[8] * d[11] * d[16] * d[20] + d[0] * d[15] * d[16] * d[20] + d[1] * std::pow(d[16], 2) * d[20] - 2 * d[8] * d[10] * d[17] * d[20] + 2 * d[7] * d[11] * d[17] * d[20] + 2 * d[2] * d[16] * d[17] * d[20] - d[1] * std::pow(d[17], 2) * d[20] - d[8] * d[13] * d[15] * d[21] + d[7] * d[14] * d[15] * d[21] + d[6] * d[14] * d[16] * d[21] + d[5] * d[15] * d[16] * d[21] - d[6] * d[13] * d[17] * d[21] - d[4] * d[15] * d[17] * d[21] - d[8] * d[12] * d[15] * d[22] - 2 * d[8] * d[13] * d[16] * d[22] + 2 * d[7] * d[14] * d[16] * d[22] + d[5] * std::pow(d[16], 2) * d[22] - d[6] * d[12] * d[17] * d[22] - 2 * d[7] * d[13] * d[17] * d[22] - 2 * d[8] * d[14] * d[17] * d[22] - d[3] * d[15] * d[17] * d[22] - 2 * d[4] * d[16] * d[17] * d[22] - d[5] * std::pow(d[17], 2) * d[22] + d[7] * d[12] * d[15] * d[23] + d[6] * d[12] * d[16] * d[23] + 2 * d[7] * d[13] * d[16] * d[23] + 2 * d[8] * d[14] * d[16] * d[23] + d[3] * d[15] * d[16] * d[23] + d[4] * std::pow(d[16], 2) * d[23] - 2 * d[8] * d[13] * d[17] * d[23] + 2 * d[7] * d[14] * d[17] * d[23] + 2 * d[5] * d[16] * d[17] * d[23] - d[4] * std::pow(d[17], 2) * d[23] - d[8] * d[9] * d[10] * d[24] + d[7] * d[9] * d[11] * d[24] - d[8] * d[12] * d[13] * d[24] + d[7] * d[12] * d[14] * d[24] + d[2] * d[9] * d[16] * d[24] + d[0] * d[11] * d[16] * d[24] + d[5] * d[12] * d[16] * d[24] + d[3] * d[14] * d[16] * d[24] - d[1] * d[9] * d[17] * d[24] - d[0] * d[10] * d[17] * d[24] - d[4] * d[12] * d[17] * d[24] - d[3] * d[13] * d[17] * d[24] - d[8] * std::pow(d[10], 2) * d[25] + d[6] * d[9] * d[11] * d[25] + 2 * d[7] * d[10] * d[11] * d[25] + d[8] * std::pow(d[11], 2) * d[25] - d[8] * std::pow(d[13], 2) * d[25] + d[6] * d[12] * d[14] * d[25] + 2 * d[7] * d[13] * d[14] * d[25] + d[8] * std::pow(d[14], 2) * d[25] + d[2] * d[9] * d[15] * d[25] + d[0] * d[11] * d[15] * d[25] + d[5] * d[12] * d[15] * d[25] + d[3] * d[14] * d[15] * d[25] + 2 * d[2] * d[10] * d[16] * d[25] + 2 * d[1] * d[11] * d[16] * d[25] + 2 * d[5] * d[13] * d[16] * d[25] + 2 * d[4] * d[14] * d[16] * d[25] - 2 * d[1] * d[10] * d[17] * d[25] + 2 * d[2] * d[11] * d[17] * d[25] - 2 * d[4] * d[13] * d[17] * d[25] + 2 * d[5] * d[14] * d[17] * d[25] - d[6] * d[9] * d[10] * d[26] - d[7] * std::pow(d[10], 2) * d[26] - 2 * d[8] * d[10] * d[11] * d[26] + d[7] * std::pow(d[11], 2) * d[26] - d[6] * d[12] * d[13] * d[26] - d[7] * std::pow(d[13], 2) * d[26] - 2 * d[8] * d[13] * d[14] * d[26] + d[7] * std::pow(d[14], 2) * d[26] - d[1] * d[9] * d[15] * d[26] - d[0] * d[10] * d[15] * d[26] - d[4] * d[12] * d[15] * d[26] - d[3] * d[13] * d[15] * d[26] - 2 * d[1] * d[10] * d[16] * d[26] + 2 * d[2] * d[11] * d[16] * d[26] - 2 * d[4] * d[13] * d[16] * d[26] + 2 * d[5] * d[14] * d[16] * d[26] - 2 * d[2] * d[10] * d[17] * d[26] - 2 * d[1] * d[11] * d[17] * d[26] - 2 * d[5] * d[13] * d[17] * d[26] - 2 * d[4] * d[14] * d[17] * d[26];
				coeffs[18] = d[11] * d[15] * d[16] * d[18] - d[10] * d[15] * d[17] * d[18] + d[11] * std::pow(d[16], 2) * d[19] - d[9] * d[15] * d[17] * d[19] - 2 * d[10] * d[16] * d[17] * d[19] - d[11] * std::pow(d[17], 2) * d[19] + d[9] * d[15] * d[16] * d[20] + d[10] * std::pow(d[16], 2) * d[20] + 2 * d[11] * d[16] * d[17] * d[20] - d[10] * std::pow(d[17], 2) * d[20] + d[14] * d[15] * d[16] * d[21] - d[13] * d[15] * d[17] * d[21] + d[14] * std::pow(d[16], 2) * d[22] - d[12] * d[15] * d[17] * d[22] - 2 * d[13] * d[16] * d[17] * d[22] - d[14] * std::pow(d[17], 2) * d[22] + d[12] * d[15] * d[16] * d[23] + d[13] * std::pow(d[16], 2) * d[23] + 2 * d[14] * d[16] * d[17] * d[23] - d[13] * std::pow(d[17], 2) * d[23] + d[9] * d[11] * d[16] * d[24] + d[12] * d[14] * d[16] * d[24] - d[9] * d[10] * d[17] * d[24] - d[12] * d[13] * d[17] * d[24] + d[9] * d[11] * d[15] * d[25] + d[12] * d[14] * d[15] * d[25] + 2 * d[10] * d[11] * d[16] * d[25] + 2 * d[13] * d[14] * d[16] * d[25] - std::pow(d[10], 2) * d[17] * d[25] + std::pow(d[11], 2) * d[17] * d[25] - std::pow(d[13], 2) * d[17] * d[25] + std::pow(d[14], 2) * d[17] * d[25] - d[9] * d[10] * d[15] * d[26] - d[12] * d[13] * d[15] * d[26] - std::pow(d[10], 2) * d[16] * d[26] + std::pow(d[11], 2) * d[16] * d[26] - std::pow(d[13], 2) * d[16] * d[26] + std::pow(d[14], 2) * d[16] * d[26] - 2 * d[10] * d[11] * d[17] * d[26] - 2 * d[13] * d[14] * d[17] * d[26];
				coeffs[19] = -d[6] * d[8] * d[18] * d[19] - d[7] * d[8] * std::pow(d[19], 2) + d[6] * d[7] * d[18] * d[20] + std::pow(d[7], 2) * d[19] * d[20] - std::pow(d[8], 2) * d[19] * d[20] + d[7] * d[8] * std::pow(d[20], 2) - d[6] * d[8] * d[21] * d[22] - d[7] * d[8] * std::pow(d[22], 2) + d[6] * d[7] * d[21] * d[23] + std::pow(d[7], 2) * d[22] * d[23] - std::pow(d[8], 2) * d[22] * d[23] + d[7] * d[8] * std::pow(d[23], 2) + d[2] * d[7] * d[18] * d[24] - d[1] * d[8] * d[18] * d[24] - d[0] * d[8] * d[19] * d[24] + d[0] * d[7] * d[20] * d[24] + d[5] * d[7] * d[21] * d[24] - d[4] * d[8] * d[21] * d[24] - d[3] * d[8] * d[22] * d[24] + d[3] * d[7] * d[23] * d[24] + d[2] * d[6] * d[18] * d[25] + 2 * d[2] * d[7] * d[19] * d[25] - 2 * d[1] * d[8] * d[19] * d[25] + d[0] * d[6] * d[20] * d[25] + 2 * d[1] * d[7] * d[20] * d[25] + 2 * d[2] * d[8] * d[20] * d[25] + d[5] * d[6] * d[21] * d[25] + 2 * d[5] * d[7] * d[22] * d[25] - 2 * d[4] * d[8] * d[22] * d[25] + d[3] * d[6] * d[23] * d[25] + 2 * d[4] * d[7] * d[23] * d[25] + 2 * d[5] * d[8] * d[23] * d[25] + d[0] * d[2] * d[24] * d[25] + d[3] * d[5] * d[24] * d[25] + d[1] * d[2] * std::pow(d[25], 2) + d[4] * d[5] * std::pow(d[25], 2) - d[1] * d[6] * d[18] * d[26] - d[0] * d[6] * d[19] * d[26] - 2 * d[1] * d[7] * d[19] * d[26] - 2 * d[2] * d[8] * d[19] * d[26] + 2 * d[2] * d[7] * d[20] * d[26] - 2 * d[1] * d[8] * d[20] * d[26] - d[4] * d[6] * d[21] * d[26] - d[3] * d[6] * d[22] * d[26] - 2 * d[4] * d[7] * d[22] * d[26] - 2 * d[5] * d[8] * d[22] * d[26] + 2 * d[5] * d[7] * d[23] * d[26] - 2 * d[4] * d[8] * d[23] * d[26] - d[0] * d[1] * d[24] * d[26] - d[3] * d[4] * d[24] * d[26] - std::pow(d[1], 2) * d[25] * d[26] + std::pow(d[2], 2) * d[25] * d[26] - std::pow(d[4], 2) * d[25] * d[26] + std::pow(d[5], 2) * d[25] * d[26] - d[1] * d[2] * std::pow(d[26], 2) - d[4] * d[5] * std::pow(d[26], 2);
				coeffs[20] = -d[8] * d[15] * d[18] * d[19] - d[6] * d[17] * d[18] * d[19] - d[8] * d[16] * std::pow(d[19], 2) - d[7] * d[17] * std::pow(d[19], 2) + d[7] * d[15] * d[18] * d[20] + d[6] * d[16] * d[18] * d[20] + 2 * d[7] * d[16] * d[19] * d[20] - 2 * d[8] * d[17] * d[19] * d[20] + d[8] * d[16] * std::pow(d[20], 2) + d[7] * d[17] * std::pow(d[20], 2) - d[8] * d[15] * d[21] * d[22] - d[6] * d[17] * d[21] * d[22] - d[8] * d[16] * std::pow(d[22], 2) - d[7] * d[17] * std::pow(d[22], 2) + d[7] * d[15] * d[21] * d[23] + d[6] * d[16] * d[21] * d[23] + 2 * d[7] * d[16] * d[22] * d[23] - 2 * d[8] * d[17] * d[22] * d[23] + d[8] * d[16] * std::pow(d[23], 2) + d[7] * d[17] * std::pow(d[23], 2) - d[8] * d[10] * d[18] * d[24] + d[7] * d[11] * d[18] * d[24] + d[2] * d[16] * d[18] * d[24] - d[1] * d[17] * d[18] * d[24] - d[8] * d[9] * d[19] * d[24] - d[0] * d[17] * d[19] * d[24] + d[7] * d[9] * d[20] * d[24] + d[0] * d[16] * d[20] * d[24] - d[8] * d[13] * d[21] * d[24] + d[7] * d[14] * d[21] * d[24] + d[5] * d[16] * d[21] * d[24] - d[4] * d[17] * d[21] * d[24] - d[8] * d[12] * d[22] * d[24] - d[3] * d[17] * d[22] * d[24] + d[7] * d[12] * d[23] * d[24] + d[3] * d[16] * d[23] * d[24] + d[6] * d[11] * d[18] * d[25] + d[2] * d[15] * d[18] * d[25] - 2 * d[8] * d[10] * d[19] * d[25] + 2 * d[7] * d[11] * d[19] * d[25] + 2 * d[2] * d[16] * d[19] * d[25] - 2 * d[1] * d[17] * d[19] * d[25] + d[6] * d[9] * d[20] * d[25] + 2 * d[7] * d[10] * d[20] * d[25] + 2 * d[8] * d[11] * d[20] * d[25] + d[0] * d[15] * d[20] * d[25] + 2 * d[1] * d[16] * d[20] * d[25] + 2 * d[2] * d[17] * d[20] * d[25] + d[6] * d[14] * d[21] * d[25] + d[5] * d[15] * d[21] * d[25] - 2 * d[8] * d[13] * d[22] * d[25] + 2 * d[7] * d[14] * d[22] * d[25] + 2 * d[5] * d[16] * d[22] * d[25] - 2 * d[4] * d[17] * d[22] * d[25] + d[6] * d[12] * d[23] * d[25] + 2 * d[7] * d[13] * d[23] * d[25] + 2 * d[8] * d[14] * d[23] * d[25] + d[3] * d[15] * d[23] * d[25] + 2 * d[4] * d[16] * d[23] * d[25] + 2 * d[5] * d[17] * d[23] * d[25] + d[2] * d[9] * d[24] * d[25] + d[0] * d[11] * d[24] * d[25] + d[5] * d[12] * d[24] * d[25] + d[3] * d[14] * d[24] * d[25] + d[2] * d[10] * std::pow(d[25], 2) + d[1] * d[11] * std::pow(d[25], 2) + d[5] * d[13] * std::pow(d[25], 2) + d[4] * d[14] * std::pow(d[25], 2) - d[6] * d[10] * d[18] * d[26] - d[1] * d[15] * d[18] * d[26] - d[6] * d[9] * d[19] * d[26] - 2 * d[7] * d[10] * d[19] * d[26] - 2 * d[8] * d[11] * d[19] * d[26] - d[0] * d[15] * d[19] * d[26] - 2 * d[1] * d[16] * d[19] * d[26] - 2 * d[2] * d[17] * d[19] * d[26] - 2 * d[8] * d[10] * d[20] * d[26] + 2 * d[7] * d[11] * d[20] * d[26] + 2 * d[2] * d[16] * d[20] * d[26] - 2 * d[1] * d[17] * d[20] * d[26] - d[6] * d[13] * d[21] * d[26] - d[4] * d[15] * d[21] * d[26] - d[6] * d[12] * d[22] * d[26] - 2 * d[7] * d[13] * d[22] * d[26] - 2 * d[8] * d[14] * d[22] * d[26] - d[3] * d[15] * d[22] * d[26] - 2 * d[4] * d[16] * d[22] * d[26] - 2 * d[5] * d[17] * d[22] * d[26] - 2 * d[8] * d[13] * d[23] * d[26] + 2 * d[7] * d[14] * d[23] * d[26] + 2 * d[5] * d[16] * d[23] * d[26] - 2 * d[4] * d[17] * d[23] * d[26] - d[1] * d[9] * d[24] * d[26] - d[0] * d[10] * d[24] * d[26] - d[4] * d[12] * d[24] * d[26] - d[3] * d[13] * d[24] * d[26] - 2 * d[1] * d[10] * d[25] * d[26] + 2 * d[2] * d[11] * d[25] * d[26] - 2 * d[4] * d[13] * d[25] * d[26] + 2 * d[5] * d[14] * d[25] * d[26] - d[2] * d[10] * std::pow(d[26], 2) - d[1] * d[11] * std::pow(d[26], 2) - d[5] * d[13] * std::pow(d[26], 2) - d[4] * d[14] * std::pow(d[26], 2);
				coeffs[21] = -d[15] * d[17] * d[18] * d[19] - d[16] * d[17] * std::pow(d[19], 2) + d[15] * d[16] * d[18] * d[20] + std::pow(d[16], 2) * d[19] * d[20] - std::pow(d[17], 2) * d[19] * d[20] + d[16] * d[17] * std::pow(d[20], 2) - d[15] * d[17] * d[21] * d[22] - d[16] * d[17] * std::pow(d[22], 2) + d[15] * d[16] * d[21] * d[23] + std::pow(d[16], 2) * d[22] * d[23] - std::pow(d[17], 2) * d[22] * d[23] + d[16] * d[17] * std::pow(d[23], 2) + d[11] * d[16] * d[18] * d[24] - d[10] * d[17] * d[18] * d[24] - d[9] * d[17] * d[19] * d[24] + d[9] * d[16] * d[20] * d[24] + d[14] * d[16] * d[21] * d[24] - d[13] * d[17] * d[21] * d[24] - d[12] * d[17] * d[22] * d[24] + d[12] * d[16] * d[23] * d[24] + d[11] * d[15] * d[18] * d[25] + 2 * d[11] * d[16] * d[19] * d[25] - 2 * d[10] * d[17] * d[19] * d[25] + d[9] * d[15] * d[20] * d[25] + 2 * d[10] * d[16] * d[20] * d[25] + 2 * d[11] * d[17] * d[20] * d[25] + d[14] * d[15] * d[21] * d[25] + 2 * d[14] * d[16] * d[22] * d[25] - 2 * d[13] * d[17] * d[22] * d[25] + d[12] * d[15] * d[23] * d[25] + 2 * d[13] * d[16] * d[23] * d[25] + 2 * d[14] * d[17] * d[23] * d[25] + d[9] * d[11] * d[24] * d[25] + d[12] * d[14] * d[24] * d[25] + d[10] * d[11] * std::pow(d[25], 2) + d[13] * d[14] * std::pow(d[25], 2) - d[10] * d[15] * d[18] * d[26] - d[9] * d[15] * d[19] * d[26] - 2 * d[10] * d[16] * d[19] * d[26] - 2 * d[11] * d[17] * d[19] * d[26] + 2 * d[11] * d[16] * d[20] * d[26] - 2 * d[10] * d[17] * d[20] * d[26] - d[13] * d[15] * d[21] * d[26] - d[12] * d[15] * d[22] * d[26] - 2 * d[13] * d[16] * d[22] * d[26] - 2 * d[14] * d[17] * d[22] * d[26] + 2 * d[14] * d[16] * d[23] * d[26] - 2 * d[13] * d[17] * d[23] * d[26] - d[9] * d[10] * d[24] * d[26] - d[12] * d[13] * d[24] * d[26] - std::pow(d[10], 2) * d[25] * d[26] + std::pow(d[11], 2) * d[25] * d[26] - std::pow(d[13], 2) * d[25] * d[26] + std::pow(d[14], 2) * d[25] * d[26] - d[10] * d[11] * std::pow(d[26], 2) - d[13] * d[14] * std::pow(d[26], 2);
				coeffs[22] = -d[8] * d[18] * d[19] * d[24] + d[7] * d[18] * d[20] * d[24] - d[8] * d[21] * d[22] * d[24] + d[7] * d[21] * d[23] * d[24] - d[8] * std::pow(d[19], 2) * d[25] + d[6] * d[18] * d[20] * d[25] + 2 * d[7] * d[19] * d[20] * d[25] + d[8] * std::pow(d[20], 2) * d[25] - d[8] * std::pow(d[22], 2) * d[25] + d[6] * d[21] * d[23] * d[25] + 2 * d[7] * d[22] * d[23] * d[25] + d[8] * std::pow(d[23], 2) * d[25] + d[2] * d[18] * d[24] * d[25] + d[0] * d[20] * d[24] * d[25] + d[5] * d[21] * d[24] * d[25] + d[3] * d[23] * d[24] * d[25] + d[2] * d[19] * std::pow(d[25], 2) + d[1] * d[20] * std::pow(d[25], 2) + d[5] * d[22] * std::pow(d[25], 2) + d[4] * d[23] * std::pow(d[25], 2) - d[6] * d[18] * d[19] * d[26] - d[7] * std::pow(d[19], 2) * d[26] - 2 * d[8] * d[19] * d[20] * d[26] + d[7] * std::pow(d[20], 2) * d[26] - d[6] * d[21] * d[22] * d[26] - d[7] * std::pow(d[22], 2) * d[26] - 2 * d[8] * d[22] * d[23] * d[26] + d[7] * std::pow(d[23], 2) * d[26] - d[1] * d[18] * d[24] * d[26] - d[0] * d[19] * d[24] * d[26] - d[4] * d[21] * d[24] * d[26] - d[3] * d[22] * d[24] * d[26] - 2 * d[1] * d[19] * d[25] * d[26] + 2 * d[2] * d[20] * d[25] * d[26] - 2 * d[4] * d[22] * d[25] * d[26] + 2 * d[5] * d[23] * d[25] * d[26] - d[2] * d[19] * std::pow(d[26], 2) - d[1] * d[20] * std::pow(d[26], 2) - d[5] * d[22] * std::pow(d[26], 2) - d[4] * d[23] * std::pow(d[26], 2);
				coeffs[23] = -d[17] * d[18] * d[19] * d[24] + d[16] * d[18] * d[20] * d[24] - d[17] * d[21] * d[22] * d[24] + d[16] * d[21] * d[23] * d[24] - d[17] * std::pow(d[19], 2) * d[25] + d[15] * d[18] * d[20] * d[25] + 2 * d[16] * d[19] * d[20] * d[25] + d[17] * std::pow(d[20], 2) * d[25] - d[17] * std::pow(d[22], 2) * d[25] + d[15] * d[21] * d[23] * d[25] + 2 * d[16] * d[22] * d[23] * d[25] + d[17] * std::pow(d[23], 2) * d[25] + d[11] * d[18] * d[24] * d[25] + d[9] * d[20] * d[24] * d[25] + d[14] * d[21] * d[24] * d[25] + d[12] * d[23] * d[24] * d[25] + d[11] * d[19] * std::pow(d[25], 2) + d[10] * d[20] * std::pow(d[25], 2) + d[14] * d[22] * std::pow(d[25], 2) + d[13] * d[23] * std::pow(d[25], 2) - d[15] * d[18] * d[19] * d[26] - d[16] * std::pow(d[19], 2) * d[26] - 2 * d[17] * d[19] * d[20] * d[26] + d[16] * std::pow(d[20], 2) * d[26] - d[15] * d[21] * d[22] * d[26] - d[16] * std::pow(d[22], 2) * d[26] - 2 * d[17] * d[22] * d[23] * d[26] + d[16] * std::pow(d[23], 2) * d[26] - d[10] * d[18] * d[24] * d[26] - d[9] * d[19] * d[24] * d[26] - d[13] * d[21] * d[24] * d[26] - d[12] * d[22] * d[24] * d[26] - 2 * d[10] * d[19] * d[25] * d[26] + 2 * d[11] * d[20] * d[25] * d[26] - 2 * d[13] * d[22] * d[25] * d[26] + 2 * d[14] * d[23] * d[25] * d[26] - d[11] * d[19] * std::pow(d[26], 2) - d[10] * d[20] * std::pow(d[26], 2) - d[14] * d[22] * std::pow(d[26], 2) - d[13] * d[23] * std::pow(d[26], 2);
				coeffs[24] = d[18] * d[20] * d[24] * d[25] + d[21] * d[23] * d[24] * d[25] + d[19] * d[20] * std::pow(d[25], 2) + d[22] * d[23] * std::pow(d[25], 2) - d[18] * d[19] * d[24] * d[26] - d[21] * d[22] * d[24] * d[26] - std::pow(d[19], 2) * d[25] * d[26] + std::pow(d[20], 2) * d[25] * d[26] - std::pow(d[22], 2) * d[25] * d[26] + std::pow(d[23], 2) * d[25] * d[26] - d[19] * d[20] * std::pow(d[26], 2) - d[22] * d[23] * std::pow(d[26], 2);
				coeffs[25] = d[0] * d[2] * std::pow(d[6], 2) + d[3] * d[5] * std::pow(d[6], 2) + d[1] * d[2] * d[6] * d[7] + d[4] * d[5] * d[6] * d[7] - std::pow(d[0], 2) * d[6] * d[8] + std::pow(d[2], 2) * d[6] * d[8] - std::pow(d[3], 2) * d[6] * d[8] + std::pow(d[5], 2) * d[6] * d[8] - d[0] * d[1] * d[7] * d[8] - d[3] * d[4] * d[7] * d[8] - d[0] * d[2] * std::pow(d[8], 2) - d[3] * d[5] * std::pow(d[8], 2);
				coeffs[26] = d[2] * std::pow(d[6], 2) * d[9] - 2 * d[0] * d[6] * d[8] * d[9] - d[1] * d[7] * d[8] * d[9] - d[2] * std::pow(d[8], 2) * d[9] + d[2] * d[6] * d[7] * d[10] - d[0] * d[7] * d[8] * d[10] + d[0] * std::pow(d[6], 2) * d[11] + d[1] * d[6] * d[7] * d[11] + 2 * d[2] * d[6] * d[8] * d[11] - d[0] * std::pow(d[8], 2) * d[11] + d[5] * std::pow(d[6], 2) * d[12] - 2 * d[3] * d[6] * d[8] * d[12] - d[4] * d[7] * d[8] * d[12] - d[5] * std::pow(d[8], 2) * d[12] + d[5] * d[6] * d[7] * d[13] - d[3] * d[7] * d[8] * d[13] + d[3] * std::pow(d[6], 2) * d[14] + d[4] * d[6] * d[7] * d[14] + 2 * d[5] * d[6] * d[8] * d[14] - d[3] * std::pow(d[8], 2) * d[14] + 2 * d[0] * d[2] * d[6] * d[15] + 2 * d[3] * d[5] * d[6] * d[15] + d[1] * d[2] * d[7] * d[15] + d[4] * d[5] * d[7] * d[15] - std::pow(d[0], 2) * d[8] * d[15] + std::pow(d[2], 2) * d[8] * d[15] - std::pow(d[3], 2) * d[8] * d[15] + std::pow(d[5], 2) * d[8] * d[15] + d[1] * d[2] * d[6] * d[16] + d[4] * d[5] * d[6] * d[16] - d[0] * d[1] * d[8] * d[16] - d[3] * d[4] * d[8] * d[16] - std::pow(d[0], 2) * d[6] * d[17] + std::pow(d[2], 2) * d[6] * d[17] - std::pow(d[3], 2) * d[6] * d[17] + std::pow(d[5], 2) * d[6] * d[17] - d[0] * d[1] * d[7] * d[17] - d[3] * d[4] * d[7] * d[17] - 2 * d[0] * d[2] * d[8] * d[17] - 2 * d[3] * d[5] * d[8] * d[17];
				coeffs[27] = -d[6] * d[8] * std::pow(d[9], 2) - d[7] * d[8] * d[9] * d[10] + std::pow(d[6], 2) * d[9] * d[11] - std::pow(d[8], 2) * d[9] * d[11] + d[6] * d[7] * d[10] * d[11] + d[6] * d[8] * std::pow(d[11], 2) - d[6] * d[8] * std::pow(d[12], 2) - d[7] * d[8] * d[12] * d[13] + std::pow(d[6], 2) * d[12] * d[14] - std::pow(d[8], 2) * d[12] * d[14] + d[6] * d[7] * d[13] * d[14] + d[6] * d[8] * std::pow(d[14], 2) + 2 * d[2] * d[6] * d[9] * d[15] - 2 * d[0] * d[8] * d[9] * d[15] + d[2] * d[7] * d[10] * d[15] + 2 * d[0] * d[6] * d[11] * d[15] + d[1] * d[7] * d[11] * d[15] + 2 * d[2] * d[8] * d[11] * d[15] + 2 * d[5] * d[6] * d[12] * d[15] - 2 * d[3] * d[8] * d[12] * d[15] + d[5] * d[7] * d[13] * d[15] + 2 * d[3] * d[6] * d[14] * d[15] + d[4] * d[7] * d[14] * d[15] + 2 * d[5] * d[8] * d[14] * d[15] + d[0] * d[2] * std::pow(d[15], 2) + d[3] * d[5] * std::pow(d[15], 2) - d[1] * d[8] * d[9] * d[16] + d[2] * d[6] * d[10] * d[16] - d[0] * d[8] * d[10] * d[16] + d[1] * d[6] * d[11] * d[16] - d[4] * d[8] * d[12] * d[16] + d[5] * d[6] * d[13] * d[16] - d[3] * d[8] * d[13] * d[16] + d[4] * d[6] * d[14] * d[16] + d[1] * d[2] * d[15] * d[16] + d[4] * d[5] * d[15] * d[16] - 2 * d[0] * d[6] * d[9] * d[17] - d[1] * d[7] * d[9] * d[17] - 2 * d[2] * d[8] * d[9] * d[17] - d[0] * d[7] * d[10] * d[17] + 2 * d[2] * d[6] * d[11] * d[17] - 2 * d[0] * d[8] * d[11] * d[17] - 2 * d[3] * d[6] * d[12] * d[17] - d[4] * d[7] * d[12] * d[17] - 2 * d[5] * d[8] * d[12] * d[17] - d[3] * d[7] * d[13] * d[17] + 2 * d[5] * d[6] * d[14] * d[17] - 2 * d[3] * d[8] * d[14] * d[17] - std::pow(d[0], 2) * d[15] * d[17] + std::pow(d[2], 2) * d[15] * d[17] - std::pow(d[3], 2) * d[15] * d[17] + std::pow(d[5], 2) * d[15] * d[17] - d[0] * d[1] * d[16] * d[17] - d[3] * d[4] * d[16] * d[17] - d[0] * d[2] * std::pow(d[17], 2) - d[3] * d[5] * std::pow(d[17], 2);
				coeffs[28] = -d[8] * std::pow(d[9], 2) * d[15] + 2 * d[6] * d[9] * d[11] * d[15] + d[7] * d[10] * d[11] * d[15] + d[8] * std::pow(d[11], 2) * d[15] - d[8] * std::pow(d[12], 2) * d[15] + 2 * d[6] * d[12] * d[14] * d[15] + d[7] * d[13] * d[14] * d[15] + d[8] * std::pow(d[14], 2) * d[15] + d[2] * d[9] * std::pow(d[15], 2) + d[0] * d[11] * std::pow(d[15], 2) + d[5] * d[12] * std::pow(d[15], 2) + d[3] * d[14] * std::pow(d[15], 2) - d[8] * d[9] * d[10] * d[16] + d[6] * d[10] * d[11] * d[16] - d[8] * d[12] * d[13] * d[16] + d[6] * d[13] * d[14] * d[16] + d[2] * d[10] * d[15] * d[16] + d[1] * d[11] * d[15] * d[16] + d[5] * d[13] * d[15] * d[16] + d[4] * d[14] * d[15] * d[16] - d[6] * std::pow(d[9], 2) * d[17] - d[7] * d[9] * d[10] * d[17] - 2 * d[8] * d[9] * d[11] * d[17] + d[6] * std::pow(d[11], 2) * d[17] - d[6] * std::pow(d[12], 2) * d[17] - d[7] * d[12] * d[13] * d[17] - 2 * d[8] * d[12] * d[14] * d[17] + d[6] * std::pow(d[14], 2) * d[17] - 2 * d[0] * d[9] * d[15] * d[17] + 2 * d[2] * d[11] * d[15] * d[17] - 2 * d[3] * d[12] * d[15] * d[17] + 2 * d[5] * d[14] * d[15] * d[17] - d[1] * d[9] * d[16] * d[17] - d[0] * d[10] * d[16] * d[17] - d[4] * d[12] * d[16] * d[17] - d[3] * d[13] * d[16] * d[17] - d[2] * d[9] * std::pow(d[17], 2) - d[0] * d[11] * std::pow(d[17], 2) - d[5] * d[12] * std::pow(d[17], 2) - d[3] * d[14] * std::pow(d[17], 2);
				coeffs[29] = d[9] * d[11] * std::pow(d[15], 2) + d[12] * d[14] * std::pow(d[15], 2) + d[10] * d[11] * d[15] * d[16] + d[13] * d[14] * d[15] * d[16] - std::pow(d[9], 2) * d[15] * d[17] + std::pow(d[11], 2) * d[15] * d[17] - std::pow(d[12], 2) * d[15] * d[17] + std::pow(d[14], 2) * d[15] * d[17] - d[9] * d[10] * d[16] * d[17] - d[12] * d[13] * d[16] * d[17] - d[9] * d[11] * std::pow(d[17], 2) - d[12] * d[14] * std::pow(d[17], 2);
				coeffs[30] = d[2] * std::pow(d[6], 2) * d[18] - 2 * d[0] * d[6] * d[8] * d[18] - d[1] * d[7] * d[8] * d[18] - d[2] * std::pow(d[8], 2) * d[18] + d[2] * d[6] * d[7] * d[19] - d[0] * d[7] * d[8] * d[19] + d[0] * std::pow(d[6], 2) * d[20] + d[1] * d[6] * d[7] * d[20] + 2 * d[2] * d[6] * d[8] * d[20] - d[0] * std::pow(d[8], 2) * d[20] + d[5] * std::pow(d[6], 2) * d[21] - 2 * d[3] * d[6] * d[8] * d[21] - d[4] * d[7] * d[8] * d[21] - d[5] * std::pow(d[8], 2) * d[21] + d[5] * d[6] * d[7] * d[22] - d[3] * d[7] * d[8] * d[22] + d[3] * std::pow(d[6], 2) * d[23] + d[4] * d[6] * d[7] * d[23] + 2 * d[5] * d[6] * d[8] * d[23] - d[3] * std::pow(d[8], 2) * d[23] + 2 * d[0] * d[2] * d[6] * d[24] + 2 * d[3] * d[5] * d[6] * d[24] + d[1] * d[2] * d[7] * d[24] + d[4] * d[5] * d[7] * d[24] - std::pow(d[0], 2) * d[8] * d[24] + std::pow(d[2], 2) * d[8] * d[24] - std::pow(d[3], 2) * d[8] * d[24] + std::pow(d[5], 2) * d[8] * d[24] + d[1] * d[2] * d[6] * d[25] + d[4] * d[5] * d[6] * d[25] - d[0] * d[1] * d[8] * d[25] - d[3] * d[4] * d[8] * d[25] - std::pow(d[0], 2) * d[6] * d[26] + std::pow(d[2], 2) * d[6] * d[26] - std::pow(d[3], 2) * d[6] * d[26] + std::pow(d[5], 2) * d[6] * d[26] - d[0] * d[1] * d[7] * d[26] - d[3] * d[4] * d[7] * d[26] - 2 * d[0] * d[2] * d[8] * d[26] - 2 * d[3] * d[5] * d[8] * d[26];
				coeffs[31] = -2 * d[6] * d[8] * d[9] * d[18] - d[7] * d[8] * d[10] * d[18] + std::pow(d[6], 2) * d[11] * d[18] - std::pow(d[8], 2) * d[11] * d[18] + 2 * d[2] * d[6] * d[15] * d[18] - 2 * d[0] * d[8] * d[15] * d[18] - d[1] * d[8] * d[16] * d[18] - 2 * d[0] * d[6] * d[17] * d[18] - d[1] * d[7] * d[17] * d[18] - 2 * d[2] * d[8] * d[17] * d[18] - d[7] * d[8] * d[9] * d[19] + d[6] * d[7] * d[11] * d[19] + d[2] * d[7] * d[15] * d[19] + d[2] * d[6] * d[16] * d[19] - d[0] * d[8] * d[16] * d[19] - d[0] * d[7] * d[17] * d[19] + std::pow(d[6], 2) * d[9] * d[20] - std::pow(d[8], 2) * d[9] * d[20] + d[6] * d[7] * d[10] * d[20] + 2 * d[6] * d[8] * d[11] * d[20] + 2 * d[0] * d[6] * d[15] * d[20] + d[1] * d[7] * d[15] * d[20] + 2 * d[2] * d[8] * d[15] * d[20] + d[1] * d[6] * d[16] * d[20] + 2 * d[2] * d[6] * d[17] * d[20] - 2 * d[0] * d[8] * d[17] * d[20] - 2 * d[6] * d[8] * d[12] * d[21] - d[7] * d[8] * d[13] * d[21] + std::pow(d[6], 2) * d[14] * d[21] - std::pow(d[8], 2) * d[14] * d[21] + 2 * d[5] * d[6] * d[15] * d[21] - 2 * d[3] * d[8] * d[15] * d[21] - d[4] * d[8] * d[16] * d[21] - 2 * d[3] * d[6] * d[17] * d[21] - d[4] * d[7] * d[17] * d[21] - 2 * d[5] * d[8] * d[17] * d[21] - d[7] * d[8] * d[12] * d[22] + d[6] * d[7] * d[14] * d[22] + d[5] * d[7] * d[15] * d[22] + d[5] * d[6] * d[16] * d[22] - d[3] * d[8] * d[16] * d[22] - d[3] * d[7] * d[17] * d[22] + std::pow(d[6], 2) * d[12] * d[23] - std::pow(d[8], 2) * d[12] * d[23] + d[6] * d[7] * d[13] * d[23] + 2 * d[6] * d[8] * d[14] * d[23] + 2 * d[3] * d[6] * d[15] * d[23] + d[4] * d[7] * d[15] * d[23] + 2 * d[5] * d[8] * d[15] * d[23] + d[4] * d[6] * d[16] * d[23] + 2 * d[5] * d[6] * d[17] * d[23] - 2 * d[3] * d[8] * d[17] * d[23] + 2 * d[2] * d[6] * d[9] * d[24] - 2 * d[0] * d[8] * d[9] * d[24] + d[2] * d[7] * d[10] * d[24] + 2 * d[0] * d[6] * d[11] * d[24] + d[1] * d[7] * d[11] * d[24] + 2 * d[2] * d[8] * d[11] * d[24] + 2 * d[5] * d[6] * d[12] * d[24] - 2 * d[3] * d[8] * d[12] * d[24] + d[5] * d[7] * d[13] * d[24] + 2 * d[3] * d[6] * d[14] * d[24] + d[4] * d[7] * d[14] * d[24] + 2 * d[5] * d[8] * d[14] * d[24] + 2 * d[0] * d[2] * d[15] * d[24] + 2 * d[3] * d[5] * d[15] * d[24] + d[1] * d[2] * d[16] * d[24] + d[4] * d[5] * d[16] * d[24] - std::pow(d[0], 2) * d[17] * d[24] + std::pow(d[2], 2) * d[17] * d[24] - std::pow(d[3], 2) * d[17] * d[24] + std::pow(d[5], 2) * d[17] * d[24] - d[1] * d[8] * d[9] * d[25] + d[2] * d[6] * d[10] * d[25] - d[0] * d[8] * d[10] * d[25] + d[1] * d[6] * d[11] * d[25] - d[4] * d[8] * d[12] * d[25] + d[5] * d[6] * d[13] * d[25] - d[3] * d[8] * d[13] * d[25] + d[4] * d[6] * d[14] * d[25] + d[1] * d[2] * d[15] * d[25] + d[4] * d[5] * d[15] * d[25] - d[0] * d[1] * d[17] * d[25] - d[3] * d[4] * d[17] * d[25] - 2 * d[0] * d[6] * d[9] * d[26] - d[1] * d[7] * d[9] * d[26] - 2 * d[2] * d[8] * d[9] * d[26] - d[0] * d[7] * d[10] * d[26] + 2 * d[2] * d[6] * d[11] * d[26] - 2 * d[0] * d[8] * d[11] * d[26] - 2 * d[3] * d[6] * d[12] * d[26] - d[4] * d[7] * d[12] * d[26] - 2 * d[5] * d[8] * d[12] * d[26] - d[3] * d[7] * d[13] * d[26] + 2 * d[5] * d[6] * d[14] * d[26] - 2 * d[3] * d[8] * d[14] * d[26] - std::pow(d[0], 2) * d[15] * d[26] + std::pow(d[2], 2) * d[15] * d[26] - std::pow(d[3], 2) * d[15] * d[26] + std::pow(d[5], 2) * d[15] * d[26] - d[0] * d[1] * d[16] * d[26] - d[3] * d[4] * d[16] * d[26] - 2 * d[0] * d[2] * d[17] * d[26] - 2 * d[3] * d[5] * d[17] * d[26];
				coeffs[32] = -2 * d[8] * d[9] * d[15] * d[18] + 2 * d[6] * d[11] * d[15] * d[18] + d[2] * std::pow(d[15], 2) * d[18] - d[8] * d[10] * d[16] * d[18] - 2 * d[6] * d[9] * d[17] * d[18] - d[7] * d[10] * d[17] * d[18] - 2 * d[8] * d[11] * d[17] * d[18] - 2 * d[0] * d[15] * d[17] * d[18] - d[1] * d[16] * d[17] * d[18] - d[2] * std::pow(d[17], 2) * d[18] + d[7] * d[11] * d[15] * d[19] - d[8] * d[9] * d[16] * d[19] + d[6] * d[11] * d[16] * d[19] + d[2] * d[15] * d[16] * d[19] - d[7] * d[9] * d[17] * d[19] - d[0] * d[16] * d[17] * d[19] + 2 * d[6] * d[9] * d[15] * d[20] + d[7] * d[10] * d[15] * d[20] + 2 * d[8] * d[11] * d[15] * d[20] + d[0] * std::pow(d[15], 2) * d[20] + d[6] * d[10] * d[16] * d[20] + d[1] * d[15] * d[16] * d[20] - 2 * d[8] * d[9] * d[17] * d[20] + 2 * d[6] * d[11] * d[17] * d[20] + 2 * d[2] * d[15] * d[17] * d[20] - d[0] * std::pow(d[17], 2) * d[20] - 2 * d[8] * d[12] * d[15] * d[21] + 2 * d[6] * d[14] * d[15] * d[21] + d[5] * std::pow(d[15], 2) * d[21] - d[8] * d[13] * d[16] * d[21] - 2 * d[6] * d[12] * d[17] * d[21] - d[7] * d[13] * d[17] * d[21] - 2 * d[8] * d[14] * d[17] * d[21] - 2 * d[3] * d[15] * d[17] * d[21] - d[4] * d[16] * d[17] * d[21] - d[5] * std::pow(d[17], 2) * d[21] + d[7] * d[14] * d[15] * d[22] - d[8] * d[12] * d[16] * d[22] + d[6] * d[14] * d[16] * d[22] + d[5] * d[15] * d[16] * d[22] - d[7] * d[12] * d[17] * d[22] - d[3] * d[16] * d[17] * d[22] + 2 * d[6] * d[12] * d[15] * d[23] + d[7] * d[13] * d[15] * d[23] + 2 * d[8] * d[14] * d[15] * d[23] + d[3] * std::pow(d[15], 2) * d[23] + d[6] * d[13] * d[16] * d[23] + d[4] * d[15] * d[16] * d[23] - 2 * d[8] * d[12] * d[17] * d[23] + 2 * d[6] * d[14] * d[17] * d[23] + 2 * d[5] * d[15] * d[17] * d[23] - d[3] * std::pow(d[17], 2) * d[23] - d[8] * std::pow(d[9], 2) * d[24] + 2 * d[6] * d[9] * d[11] * d[24] + d[7] * d[10] * d[11] * d[24] + d[8] * std::pow(d[11], 2) * d[24] - d[8] * std::pow(d[12], 2) * d[24] + 2 * d[6] * d[12] * d[14] * d[24] + d[7] * d[13] * d[14] * d[24] + d[8] * std::pow(d[14], 2) * d[24] + 2 * d[2] * d[9] * d[15] * d[24] + 2 * d[0] * d[11] * d[15] * d[24] + 2 * d[5] * d[12] * d[15] * d[24] + 2 * d[3] * d[14] * d[15] * d[24] + d[2] * d[10] * d[16] * d[24] + d[1] * d[11] * d[16] * d[24] + d[5] * d[13] * d[16] * d[24] + d[4] * d[14] * d[16] * d[24] - 2 * d[0] * d[9] * d[17] * d[24] + 2 * d[2] * d[11] * d[17] * d[24] - 2 * d[3] * d[12] * d[17] * d[24] + 2 * d[5] * d[14] * d[17] * d[24] - d[8] * d[9] * d[10] * d[25] + d[6] * d[10] * d[11] * d[25] - d[8] * d[12] * d[13] * d[25] + d[6] * d[13] * d[14] * d[25] + d[2] * d[10] * d[15] * d[25] + d[1] * d[11] * d[15] * d[25] + d[5] * d[13] * d[15] * d[25] + d[4] * d[14] * d[15] * d[25] - d[1] * d[9] * d[17] * d[25] - d[0] * d[10] * d[17] * d[25] - d[4] * d[12] * d[17] * d[25] - d[3] * d[13] * d[17] * d[25] - d[6] * std::pow(d[9], 2) * d[26] - d[7] * d[9] * d[10] * d[26] - 2 * d[8] * d[9] * d[11] * d[26] + d[6] * std::pow(d[11], 2) * d[26] - d[6] * std::pow(d[12], 2) * d[26] - d[7] * d[12] * d[13] * d[26] - 2 * d[8] * d[12] * d[14] * d[26] + d[6] * std::pow(d[14], 2) * d[26] - 2 * d[0] * d[9] * d[15] * d[26] + 2 * d[2] * d[11] * d[15] * d[26] - 2 * d[3] * d[12] * d[15] * d[26] + 2 * d[5] * d[14] * d[15] * d[26] - d[1] * d[9] * d[16] * d[26] - d[0] * d[10] * d[16] * d[26] - d[4] * d[12] * d[16] * d[26] - d[3] * d[13] * d[16] * d[26] - 2 * d[2] * d[9] * d[17] * d[26] - 2 * d[0] * d[11] * d[17] * d[26] - 2 * d[5] * d[12] * d[17] * d[26] - 2 * d[3] * d[14] * d[17] * d[26];
				coeffs[33] = d[11] * std::pow(d[15], 2) * d[18] - 2 * d[9] * d[15] * d[17] * d[18] - d[10] * d[16] * d[17] * d[18] - d[11] * std::pow(d[17], 2) * d[18] + d[11] * d[15] * d[16] * d[19] - d[9] * d[16] * d[17] * d[19] + d[9] * std::pow(d[15], 2) * d[20] + d[10] * d[15] * d[16] * d[20] + 2 * d[11] * d[15] * d[17] * d[20] - d[9] * std::pow(d[17], 2) * d[20] + d[14] * std::pow(d[15], 2) * d[21] - 2 * d[12] * d[15] * d[17] * d[21] - d[13] * d[16] * d[17] * d[21] - d[14] * std::pow(d[17], 2) * d[21] + d[14] * d[15] * d[16] * d[22] - d[12] * d[16] * d[17] * d[22] + d[12] * std::pow(d[15], 2) * d[23] + d[13] * d[15] * d[16] * d[23] + 2 * d[14] * d[15] * d[17] * d[23] - d[12] * std::pow(d[17], 2) * d[23] + 2 * d[9] * d[11] * d[15] * d[24] + 2 * d[12] * d[14] * d[15] * d[24] + d[10] * d[11] * d[16] * d[24] + d[13] * d[14] * d[16] * d[24] - std::pow(d[9], 2) * d[17] * d[24] + std::pow(d[11], 2) * d[17] * d[24] - std::pow(d[12], 2) * d[17] * d[24] + std::pow(d[14], 2) * d[17] * d[24] + d[10] * d[11] * d[15] * d[25] + d[13] * d[14] * d[15] * d[25] - d[9] * d[10] * d[17] * d[25] - d[12] * d[13] * d[17] * d[25] - std::pow(d[9], 2) * d[15] * d[26] + std::pow(d[11], 2) * d[15] * d[26] - std::pow(d[12], 2) * d[15] * d[26] + std::pow(d[14], 2) * d[15] * d[26] - d[9] * d[10] * d[16] * d[26] - d[12] * d[13] * d[16] * d[26] - 2 * d[9] * d[11] * d[17] * d[26] - 2 * d[12] * d[14] * d[17] * d[26];
				coeffs[34] = -d[6] * d[8] * std::pow(d[18], 2) - d[7] * d[8] * d[18] * d[19] + std::pow(d[6], 2) * d[18] * d[20] - std::pow(d[8], 2) * d[18] * d[20] + d[6] * d[7] * d[19] * d[20] + d[6] * d[8] * std::pow(d[20], 2) - d[6] * d[8] * std::pow(d[21], 2) - d[7] * d[8] * d[21] * d[22] + std::pow(d[6], 2) * d[21] * d[23] - std::pow(d[8], 2) * d[21] * d[23] + d[6] * d[7] * d[22] * d[23] + d[6] * d[8] * std::pow(d[23], 2) + 2 * d[2] * d[6] * d[18] * d[24] - 2 * d[0] * d[8] * d[18] * d[24] + d[2] * d[7] * d[19] * d[24] + 2 * d[0] * d[6] * d[20] * d[24] + d[1] * d[7] * d[20] * d[24] + 2 * d[2] * d[8] * d[20] * d[24] + 2 * d[5] * d[6] * d[21] * d[24] - 2 * d[3] * d[8] * d[21] * d[24] + d[5] * d[7] * d[22] * d[24] + 2 * d[3] * d[6] * d[23] * d[24] + d[4] * d[7] * d[23] * d[24] + 2 * d[5] * d[8] * d[23] * d[24] + d[0] * d[2] * std::pow(d[24], 2) + d[3] * d[5] * std::pow(d[24], 2) - d[1] * d[8] * d[18] * d[25] + d[2] * d[6] * d[19] * d[25] - d[0] * d[8] * d[19] * d[25] + d[1] * d[6] * d[20] * d[25] - d[4] * d[8] * d[21] * d[25] + d[5] * d[6] * d[22] * d[25] - d[3] * d[8] * d[22] * d[25] + d[4] * d[6] * d[23] * d[25] + d[1] * d[2] * d[24] * d[25] + d[4] * d[5] * d[24] * d[25] - 2 * d[0] * d[6] * d[18] * d[26] - d[1] * d[7] * d[18] * d[26] - 2 * d[2] * d[8] * d[18] * d[26] - d[0] * d[7] * d[19] * d[26] + 2 * d[2] * d[6] * d[20] * d[26] - 2 * d[0] * d[8] * d[20] * d[26] - 2 * d[3] * d[6] * d[21] * d[26] - d[4] * d[7] * d[21] * d[26] - 2 * d[5] * d[8] * d[21] * d[26] - d[3] * d[7] * d[22] * d[26] + 2 * d[5] * d[6] * d[23] * d[26] - 2 * d[3] * d[8] * d[23] * d[26] - std::pow(d[0], 2) * d[24] * d[26] + std::pow(d[2], 2) * d[24] * d[26] - std::pow(d[3], 2) * d[24] * d[26] + std::pow(d[5], 2) * d[24] * d[26] - d[0] * d[1] * d[25] * d[26] - d[3] * d[4] * d[25] * d[26] - d[0] * d[2] * std::pow(d[26], 2) - d[3] * d[5] * std::pow(d[26], 2);
				coeffs[35] = -d[8] * d[15] * std::pow(d[18], 2) - d[6] * d[17] * std::pow(d[18], 2) - d[8] * d[16] * d[18] * d[19] - d[7] * d[17] * d[18] * d[19] + 2 * d[6] * d[15] * d[18] * d[20] - 2 * d[8] * d[17] * d[18] * d[20] + d[7] * d[15] * d[19] * d[20] + d[6] * d[16] * d[19] * d[20] + d[8] * d[15] * std::pow(d[20], 2) + d[6] * d[17] * std::pow(d[20], 2) - d[8] * d[15] * std::pow(d[21], 2) - d[6] * d[17] * std::pow(d[21], 2) - d[8] * d[16] * d[21] * d[22] - d[7] * d[17] * d[21] * d[22] + 2 * d[6] * d[15] * d[21] * d[23] - 2 * d[8] * d[17] * d[21] * d[23] + d[7] * d[15] * d[22] * d[23] + d[6] * d[16] * d[22] * d[23] + d[8] * d[15] * std::pow(d[23], 2) + d[6] * d[17] * std::pow(d[23], 2) - 2 * d[8] * d[9] * d[18] * d[24] + 2 * d[6] * d[11] * d[18] * d[24] + 2 * d[2] * d[15] * d[18] * d[24] - 2 * d[0] * d[17] * d[18] * d[24] + d[7] * d[11] * d[19] * d[24] + d[2] * d[16] * d[19] * d[24] + 2 * d[6] * d[9] * d[20] * d[24] + d[7] * d[10] * d[20] * d[24] + 2 * d[8] * d[11] * d[20] * d[24] + 2 * d[0] * d[15] * d[20] * d[24] + d[1] * d[16] * d[20] * d[24] + 2 * d[2] * d[17] * d[20] * d[24] - 2 * d[8] * d[12] * d[21] * d[24] + 2 * d[6] * d[14] * d[21] * d[24] + 2 * d[5] * d[15] * d[21] * d[24] - 2 * d[3] * d[17] * d[21] * d[24] + d[7] * d[14] * d[22] * d[24] + d[5] * d[16] * d[22] * d[24] + 2 * d[6] * d[12] * d[23] * d[24] + d[7] * d[13] * d[23] * d[24] + 2 * d[8] * d[14] * d[23] * d[24] + 2 * d[3] * d[15] * d[23] * d[24] + d[4] * d[16] * d[23] * d[24] + 2 * d[5] * d[17] * d[23] * d[24] + d[2] * d[9] * std::pow(d[24], 2) + d[0] * d[11] * std::pow(d[24], 2) + d[5] * d[12] * std::pow(d[24], 2) + d[3] * d[14] * std::pow(d[24], 2) - d[8] * d[10] * d[18] * d[25] - d[1] * d[17] * d[18] * d[25] - d[8] * d[9] * d[19] * d[25] + d[6] * d[11] * d[19] * d[25] + d[2] * d[15] * d[19] * d[25] - d[0] * d[17] * d[19] * d[25] + d[6] * d[10] * d[20] * d[25] + d[1] * d[15] * d[20] * d[25] - d[8] * d[13] * d[21] * d[25] - d[4] * d[17] * d[21] * d[25] - d[8] * d[12] * d[22] * d[25] + d[6] * d[14] * d[22] * d[25] + d[5] * d[15] * d[22] * d[25] - d[3] * d[17] * d[22] * d[25] + d[6] * d[13] * d[23] * d[25] + d[4] * d[15] * d[23] * d[25] + d[2] * d[10] * d[24] * d[25] + d[1] * d[11] * d[24] * d[25] + d[5] * d[13] * d[24] * d[25] + d[4] * d[14] * d[24] * d[25] - 2 * d[6] * d[9] * d[18] * d[26] - d[7] * d[10] * d[18] * d[26] - 2 * d[8] * d[11] * d[18] * d[26] - 2 * d[0] * d[15] * d[18] * d[26] - d[1] * d[16] * d[18] * d[26] - 2 * d[2] * d[17] * d[18] * d[26] - d[7] * d[9] * d[19] * d[26] - d[0] * d[16] * d[19] * d[26] - 2 * d[8] * d[9] * d[20] * d[26] + 2 * d[6] * d[11] * d[20] * d[26] + 2 * d[2] * d[15] * d[20] * d[26] - 2 * d[0] * d[17] * d[20] * d[26] - 2 * d[6] * d[12] * d[21] * d[26] - d[7] * d[13] * d[21] * d[26] - 2 * d[8] * d[14] * d[21] * d[26] - 2 * d[3] * d[15] * d[21] * d[26] - d[4] * d[16] * d[21] * d[26] - 2 * d[5] * d[17] * d[21] * d[26] - d[7] * d[12] * d[22] * d[26] - d[3] * d[16] * d[22] * d[26] - 2 * d[8] * d[12] * d[23] * d[26] + 2 * d[6] * d[14] * d[23] * d[26] + 2 * d[5] * d[15] * d[23] * d[26] - 2 * d[3] * d[17] * d[23] * d[26] - 2 * d[0] * d[9] * d[24] * d[26] + 2 * d[2] * d[11] * d[24] * d[26] - 2 * d[3] * d[12] * d[24] * d[26] + 2 * d[5] * d[14] * d[24] * d[26] - d[1] * d[9] * d[25] * d[26] - d[0] * d[10] * d[25] * d[26] - d[4] * d[12] * d[25] * d[26] - d[3] * d[13] * d[25] * d[26] - d[2] * d[9] * std::pow(d[26], 2) - d[0] * d[11] * std::pow(d[26], 2) - d[5] * d[12] * std::pow(d[26], 2) - d[3] * d[14] * std::pow(d[26], 2);
				coeffs[36] = -d[15] * d[17] * std::pow(d[18], 2) - d[16] * d[17] * d[18] * d[19] + std::pow(d[15], 2) * d[18] * d[20] - std::pow(d[17], 2) * d[18] * d[20] + d[15] * d[16] * d[19] * d[20] + d[15] * d[17] * std::pow(d[20], 2) - d[15] * d[17] * std::pow(d[21], 2) - d[16] * d[17] * d[21] * d[22] + std::pow(d[15], 2) * d[21] * d[23] - std::pow(d[17], 2) * d[21] * d[23] + d[15] * d[16] * d[22] * d[23] + d[15] * d[17] * std::pow(d[23], 2) + 2 * d[11] * d[15] * d[18] * d[24] - 2 * d[9] * d[17] * d[18] * d[24] + d[11] * d[16] * d[19] * d[24] + 2 * d[9] * d[15] * d[20] * d[24] + d[10] * d[16] * d[20] * d[24] + 2 * d[11] * d[17] * d[20] * d[24] + 2 * d[14] * d[15] * d[21] * d[24] - 2 * d[12] * d[17] * d[21] * d[24] + d[14] * d[16] * d[22] * d[24] + 2 * d[12] * d[15] * d[23] * d[24] + d[13] * d[16] * d[23] * d[24] + 2 * d[14] * d[17] * d[23] * d[24] + d[9] * d[11] * std::pow(d[24], 2) + d[12] * d[14] * std::pow(d[24], 2) - d[10] * d[17] * d[18] * d[25] + d[11] * d[15] * d[19] * d[25] - d[9] * d[17] * d[19] * d[25] + d[10] * d[15] * d[20] * d[25] - d[13] * d[17] * d[21] * d[25] + d[14] * d[15] * d[22] * d[25] - d[12] * d[17] * d[22] * d[25] + d[13] * d[15] * d[23] * d[25] + d[10] * d[11] * d[24] * d[25] + d[13] * d[14] * d[24] * d[25] - 2 * d[9] * d[15] * d[18] * d[26] - d[10] * d[16] * d[18] * d[26] - 2 * d[11] * d[17] * d[18] * d[26] - d[9] * d[16] * d[19] * d[26] + 2 * d[11] * d[15] * d[20] * d[26] - 2 * d[9] * d[17] * d[20] * d[26] - 2 * d[12] * d[15] * d[21] * d[26] - d[13] * d[16] * d[21] * d[26] - 2 * d[14] * d[17] * d[21] * d[26] - d[12] * d[16] * d[22] * d[26] + 2 * d[14] * d[15] * d[23] * d[26] - 2 * d[12] * d[17] * d[23] * d[26] - std::pow(d[9], 2) * d[24] * d[26] + std::pow(d[11], 2) * d[24] * d[26] - std::pow(d[12], 2) * d[24] * d[26] + std::pow(d[14], 2) * d[24] * d[26] - d[9] * d[10] * d[25] * d[26] - d[12] * d[13] * d[25] * d[26] - d[9] * d[11] * std::pow(d[26], 2) - d[12] * d[14] * std::pow(d[26], 2);
				coeffs[37] = -d[8] * std::pow(d[18], 2) * d[24] + 2 * d[6] * d[18] * d[20] * d[24] + d[7] * d[19] * d[20] * d[24] + d[8] * std::pow(d[20], 2) * d[24] - d[8] * std::pow(d[21], 2) * d[24] + 2 * d[6] * d[21] * d[23] * d[24] + d[7] * d[22] * d[23] * d[24] + d[8] * std::pow(d[23], 2) * d[24] + d[2] * d[18] * std::pow(d[24], 2) + d[0] * d[20] * std::pow(d[24], 2) + d[5] * d[21] * std::pow(d[24], 2) + d[3] * d[23] * std::pow(d[24], 2) - d[8] * d[18] * d[19] * d[25] + d[6] * d[19] * d[20] * d[25] - d[8] * d[21] * d[22] * d[25] + d[6] * d[22] * d[23] * d[25] + d[2] * d[19] * d[24] * d[25] + d[1] * d[20] * d[24] * d[25] + d[5] * d[22] * d[24] * d[25] + d[4] * d[23] * d[24] * d[25] - d[6] * std::pow(d[18], 2) * d[26] - d[7] * d[18] * d[19] * d[26] - 2 * d[8] * d[18] * d[20] * d[26] + d[6] * std::pow(d[20], 2) * d[26] - d[6] * std::pow(d[21], 2) * d[26] - d[7] * d[21] * d[22] * d[26] - 2 * d[8] * d[21] * d[23] * d[26] + d[6] * std::pow(d[23], 2) * d[26] - 2 * d[0] * d[18] * d[24] * d[26] + 2 * d[2] * d[20] * d[24] * d[26] - 2 * d[3] * d[21] * d[24] * d[26] + 2 * d[5] * d[23] * d[24] * d[26] - d[1] * d[18] * d[25] * d[26] - d[0] * d[19] * d[25] * d[26] - d[4] * d[21] * d[25] * d[26] - d[3] * d[22] * d[25] * d[26] - d[2] * d[18] * std::pow(d[26], 2) - d[0] * d[20] * std::pow(d[26], 2) - d[5] * d[21] * std::pow(d[26], 2) - d[3] * d[23] * std::pow(d[26], 2);
				coeffs[38] = -d[17] * std::pow(d[18], 2) * d[24] + 2 * d[15] * d[18] * d[20] * d[24] + d[16] * d[19] * d[20] * d[24] + d[17] * std::pow(d[20], 2) * d[24] - d[17] * std::pow(d[21], 2) * d[24] + 2 * d[15] * d[21] * d[23] * d[24] + d[16] * d[22] * d[23] * d[24] + d[17] * std::pow(d[23], 2) * d[24] + d[11] * d[18] * std::pow(d[24], 2) + d[9] * d[20] * std::pow(d[24], 2) + d[14] * d[21] * std::pow(d[24], 2) + d[12] * d[23] * std::pow(d[24], 2) - d[17] * d[18] * d[19] * d[25] + d[15] * d[19] * d[20] * d[25] - d[17] * d[21] * d[22] * d[25] + d[15] * d[22] * d[23] * d[25] + d[11] * d[19] * d[24] * d[25] + d[10] * d[20] * d[24] * d[25] + d[14] * d[22] * d[24] * d[25] + d[13] * d[23] * d[24] * d[25] - d[15] * std::pow(d[18], 2) * d[26] - d[16] * d[18] * d[19] * d[26] - 2 * d[17] * d[18] * d[20] * d[26] + d[15] * std::pow(d[20], 2) * d[26] - d[15] * std::pow(d[21], 2) * d[26] - d[16] * d[21] * d[22] * d[26] - 2 * d[17] * d[21] * d[23] * d[26] + d[15] * std::pow(d[23], 2) * d[26] - 2 * d[9] * d[18] * d[24] * d[26] + 2 * d[11] * d[20] * d[24] * d[26] - 2 * d[12] * d[21] * d[24] * d[26] + 2 * d[14] * d[23] * d[24] * d[26] - d[10] * d[18] * d[25] * d[26] - d[9] * d[19] * d[25] * d[26] - d[13] * d[21] * d[25] * d[26] - d[12] * d[22] * d[25] * d[26] - d[11] * d[18] * std::pow(d[26], 2) - d[9] * d[20] * std::pow(d[26], 2) - d[14] * d[21] * std::pow(d[26], 2) - d[12] * d[23] * std::pow(d[26], 2);
				coeffs[39] = d[18] * d[20] * std::pow(d[24], 2) + d[21] * d[23] * std::pow(d[24], 2) + d[19] * d[20] * d[24] * d[25] + d[22] * d[23] * d[24] * d[25] - std::pow(d[18], 2) * d[24] * d[26] + std::pow(d[20], 2) * d[24] * d[26] - std::pow(d[21], 2) * d[24] * d[26] + std::pow(d[23], 2) * d[24] * d[26] - d[18] * d[19] * d[25] * d[26] - d[21] * d[22] * d[25] * d[26] - d[18] * d[20] * std::pow(d[26], 2) - d[21] * d[23] * std::pow(d[26], 2);
				coeffs[40] = d[0] * d[1] * std::pow(d[6], 2) + d[3] * d[4] * std::pow(d[6], 2) - std::pow(d[0], 2) * d[6] * d[7] + std::pow(d[1], 2) * d[6] * d[7] - std::pow(d[3], 2) * d[6] * d[7] + std::pow(d[4], 2) * d[6] * d[7] - d[0] * d[1] * std::pow(d[7], 2) - d[3] * d[4] * std::pow(d[7], 2) + d[1] * d[2] * d[6] * d[8] + d[4] * d[5] * d[6] * d[8] - d[0] * d[2] * d[7] * d[8] - d[3] * d[5] * d[7] * d[8];
				coeffs[41] = d[1] * std::pow(d[6], 2) * d[9] - 2 * d[0] * d[6] * d[7] * d[9] - d[1] * std::pow(d[7], 2) * d[9] - d[2] * d[7] * d[8] * d[9] + d[0] * std::pow(d[6], 2) * d[10] + 2 * d[1] * d[6] * d[7] * d[10] - d[0] * std::pow(d[7], 2) * d[10] + d[2] * d[6] * d[8] * d[10] + d[1] * d[6] * d[8] * d[11] - d[0] * d[7] * d[8] * d[11] + d[4] * std::pow(d[6], 2) * d[12] - 2 * d[3] * d[6] * d[7] * d[12] - d[4] * std::pow(d[7], 2) * d[12] - d[5] * d[7] * d[8] * d[12] + d[3] * std::pow(d[6], 2) * d[13] + 2 * d[4] * d[6] * d[7] * d[13] - d[3] * std::pow(d[7], 2) * d[13] + d[5] * d[6] * d[8] * d[13] + d[4] * d[6] * d[8] * d[14] - d[3] * d[7] * d[8] * d[14] + 2 * d[0] * d[1] * d[6] * d[15] + 2 * d[3] * d[4] * d[6] * d[15] - std::pow(d[0], 2) * d[7] * d[15] + std::pow(d[1], 2) * d[7] * d[15] - std::pow(d[3], 2) * d[7] * d[15] + std::pow(d[4], 2) * d[7] * d[15] + d[1] * d[2] * d[8] * d[15] + d[4] * d[5] * d[8] * d[15] - std::pow(d[0], 2) * d[6] * d[16] + std::pow(d[1], 2) * d[6] * d[16] - std::pow(d[3], 2) * d[6] * d[16] + std::pow(d[4], 2) * d[6] * d[16] - 2 * d[0] * d[1] * d[7] * d[16] - 2 * d[3] * d[4] * d[7] * d[16] - d[0] * d[2] * d[8] * d[16] - d[3] * d[5] * d[8] * d[16] + d[1] * d[2] * d[6] * d[17] + d[4] * d[5] * d[6] * d[17] - d[0] * d[2] * d[7] * d[17] - d[3] * d[5] * d[7] * d[17];
				coeffs[42] = -d[6] * d[7] * std::pow(d[9], 2) + std::pow(d[6], 2) * d[9] * d[10] - std::pow(d[7], 2) * d[9] * d[10] + d[6] * d[7] * std::pow(d[10], 2) - d[7] * d[8] * d[9] * d[11] + d[6] * d[8] * d[10] * d[11] - d[6] * d[7] * std::pow(d[12], 2) + std::pow(d[6], 2) * d[12] * d[13] - std::pow(d[7], 2) * d[12] * d[13] + d[6] * d[7] * std::pow(d[13], 2) - d[7] * d[8] * d[12] * d[14] + d[6] * d[8] * d[13] * d[14] + 2 * d[1] * d[6] * d[9] * d[15] - 2 * d[0] * d[7] * d[9] * d[15] + 2 * d[0] * d[6] * d[10] * d[15] + 2 * d[1] * d[7] * d[10] * d[15] + d[2] * d[8] * d[10] * d[15] + d[1] * d[8] * d[11] * d[15] + 2 * d[4] * d[6] * d[12] * d[15] - 2 * d[3] * d[7] * d[12] * d[15] + 2 * d[3] * d[6] * d[13] * d[15] + 2 * d[4] * d[7] * d[13] * d[15] + d[5] * d[8] * d[13] * d[15] + d[4] * d[8] * d[14] * d[15] + d[0] * d[1] * std::pow(d[15], 2) + d[3] * d[4] * std::pow(d[15], 2) - 2 * d[0] * d[6] * d[9] * d[16] - 2 * d[1] * d[7] * d[9] * d[16] - d[2] * d[8] * d[9] * d[16] + 2 * d[1] * d[6] * d[10] * d[16] - 2 * d[0] * d[7] * d[10] * d[16] - d[0] * d[8] * d[11] * d[16] - 2 * d[3] * d[6] * d[12] * d[16] - 2 * d[4] * d[7] * d[12] * d[16] - d[5] * d[8] * d[12] * d[16] + 2 * d[4] * d[6] * d[13] * d[16] - 2 * d[3] * d[7] * d[13] * d[16] - d[3] * d[8] * d[14] * d[16] - std::pow(d[0], 2) * d[15] * d[16] + std::pow(d[1], 2) * d[15] * d[16] - std::pow(d[3], 2) * d[15] * d[16] + std::pow(d[4], 2) * d[15] * d[16] - d[0] * d[1] * std::pow(d[16], 2) - d[3] * d[4] * std::pow(d[16], 2) - d[2] * d[7] * d[9] * d[17] + d[2] * d[6] * d[10] * d[17] + d[1] * d[6] * d[11] * d[17] - d[0] * d[7] * d[11] * d[17] - d[5] * d[7] * d[12] * d[17] + d[5] * d[6] * d[13] * d[17] + d[4] * d[6] * d[14] * d[17] - d[3] * d[7] * d[14] * d[17] + d[1] * d[2] * d[15] * d[17] + d[4] * d[5] * d[15] * d[17] - d[0] * d[2] * d[16] * d[17] - d[3] * d[5] * d[16] * d[17];
				coeffs[43] = -d[7] * std::pow(d[9], 2) * d[15] + 2 * d[6] * d[9] * d[10] * d[15] + d[7] * std::pow(d[10], 2) * d[15] + d[8] * d[10] * d[11] * d[15] - d[7] * std::pow(d[12], 2) * d[15] + 2 * d[6] * d[12] * d[13] * d[15] + d[7] * std::pow(d[13], 2) * d[15] + d[8] * d[13] * d[14] * d[15] + d[1] * d[9] * std::pow(d[15], 2) + d[0] * d[10] * std::pow(d[15], 2) + d[4] * d[12] * std::pow(d[15], 2) + d[3] * d[13] * std::pow(d[15], 2) - d[6] * std::pow(d[9], 2) * d[16] - 2 * d[7] * d[9] * d[10] * d[16] + d[6] * std::pow(d[10], 2) * d[16] - d[8] * d[9] * d[11] * d[16] - d[6] * std::pow(d[12], 2) * d[16] - 2 * d[7] * d[12] * d[13] * d[16] + d[6] * std::pow(d[13], 2) * d[16] - d[8] * d[12] * d[14] * d[16] - 2 * d[0] * d[9] * d[15] * d[16] + 2 * d[1] * d[10] * d[15] * d[16] - 2 * d[3] * d[12] * d[15] * d[16] + 2 * d[4] * d[13] * d[15] * d[16] - d[1] * d[9] * std::pow(d[16], 2) - d[0] * d[10] * std::pow(d[16], 2) - d[4] * d[12] * std::pow(d[16], 2) - d[3] * d[13] * std::pow(d[16], 2) - d[7] * d[9] * d[11] * d[17] + d[6] * d[10] * d[11] * d[17] - d[7] * d[12] * d[14] * d[17] + d[6] * d[13] * d[14] * d[17] + d[2] * d[10] * d[15] * d[17] + d[1] * d[11] * d[15] * d[17] + d[5] * d[13] * d[15] * d[17] + d[4] * d[14] * d[15] * d[17] - d[2] * d[9] * d[16] * d[17] - d[0] * d[11] * d[16] * d[17] - d[5] * d[12] * d[16] * d[17] - d[3] * d[14] * d[16] * d[17];
				coeffs[44] = d[9] * d[10] * std::pow(d[15], 2) + d[12] * d[13] * std::pow(d[15], 2) - std::pow(d[9], 2) * d[15] * d[16] + std::pow(d[10], 2) * d[15] * d[16] - std::pow(d[12], 2) * d[15] * d[16] + std::pow(d[13], 2) * d[15] * d[16] - d[9] * d[10] * std::pow(d[16], 2) - d[12] * d[13] * std::pow(d[16], 2) + d[10] * d[11] * d[15] * d[17] + d[13] * d[14] * d[15] * d[17] - d[9] * d[11] * d[16] * d[17] - d[12] * d[14] * d[16] * d[17];
				coeffs[45] = d[1] * std::pow(d[6], 2) * d[18] - 2 * d[0] * d[6] * d[7] * d[18] - d[1] * std::pow(d[7], 2) * d[18] - d[2] * d[7] * d[8] * d[18] + d[0] * std::pow(d[6], 2) * d[19] + 2 * d[1] * d[6] * d[7] * d[19] - d[0] * std::pow(d[7], 2) * d[19] + d[2] * d[6] * d[8] * d[19] + d[1] * d[6] * d[8] * d[20] - d[0] * d[7] * d[8] * d[20] + d[4] * std::pow(d[6], 2) * d[21] - 2 * d[3] * d[6] * d[7] * d[21] - d[4] * std::pow(d[7], 2) * d[21] - d[5] * d[7] * d[8] * d[21] + d[3] * std::pow(d[6], 2) * d[22] + 2 * d[4] * d[6] * d[7] * d[22] - d[3] * std::pow(d[7], 2) * d[22] + d[5] * d[6] * d[8] * d[22] + d[4] * d[6] * d[8] * d[23] - d[3] * d[7] * d[8] * d[23] + 2 * d[0] * d[1] * d[6] * d[24] + 2 * d[3] * d[4] * d[6] * d[24] - std::pow(d[0], 2) * d[7] * d[24] + std::pow(d[1], 2) * d[7] * d[24] - std::pow(d[3], 2) * d[7] * d[24] + std::pow(d[4], 2) * d[7] * d[24] + d[1] * d[2] * d[8] * d[24] + d[4] * d[5] * d[8] * d[24] - std::pow(d[0], 2) * d[6] * d[25] + std::pow(d[1], 2) * d[6] * d[25] - std::pow(d[3], 2) * d[6] * d[25] + std::pow(d[4], 2) * d[6] * d[25] - 2 * d[0] * d[1] * d[7] * d[25] - 2 * d[3] * d[4] * d[7] * d[25] - d[0] * d[2] * d[8] * d[25] - d[3] * d[5] * d[8] * d[25] + d[1] * d[2] * d[6] * d[26] + d[4] * d[5] * d[6] * d[26] - d[0] * d[2] * d[7] * d[26] - d[3] * d[5] * d[7] * d[26];
				coeffs[46] = -2 * d[6] * d[7] * d[9] * d[18] + std::pow(d[6], 2) * d[10] * d[18] - std::pow(d[7], 2) * d[10] * d[18] - d[7] * d[8] * d[11] * d[18] + 2 * d[1] * d[6] * d[15] * d[18] - 2 * d[0] * d[7] * d[15] * d[18] - 2 * d[0] * d[6] * d[16] * d[18] - 2 * d[1] * d[7] * d[16] * d[18] - d[2] * d[8] * d[16] * d[18] - d[2] * d[7] * d[17] * d[18] + std::pow(d[6], 2) * d[9] * d[19] - std::pow(d[7], 2) * d[9] * d[19] + 2 * d[6] * d[7] * d[10] * d[19] + d[6] * d[8] * d[11] * d[19] + 2 * d[0] * d[6] * d[15] * d[19] + 2 * d[1] * d[7] * d[15] * d[19] + d[2] * d[8] * d[15] * d[19] + 2 * d[1] * d[6] * d[16] * d[19] - 2 * d[0] * d[7] * d[16] * d[19] + d[2] * d[6] * d[17] * d[19] - d[7] * d[8] * d[9] * d[20] + d[6] * d[8] * d[10] * d[20] + d[1] * d[8] * d[15] * d[20] - d[0] * d[8] * d[16] * d[20] + d[1] * d[6] * d[17] * d[20] - d[0] * d[7] * d[17] * d[20] - 2 * d[6] * d[7] * d[12] * d[21] + std::pow(d[6], 2) * d[13] * d[21] - std::pow(d[7], 2) * d[13] * d[21] - d[7] * d[8] * d[14] * d[21] + 2 * d[4] * d[6] * d[15] * d[21] - 2 * d[3] * d[7] * d[15] * d[21] - 2 * d[3] * d[6] * d[16] * d[21] - 2 * d[4] * d[7] * d[16] * d[21] - d[5] * d[8] * d[16] * d[21] - d[5] * d[7] * d[17] * d[21] + std::pow(d[6], 2) * d[12] * d[22] - std::pow(d[7], 2) * d[12] * d[22] + 2 * d[6] * d[7] * d[13] * d[22] + d[6] * d[8] * d[14] * d[22] + 2 * d[3] * d[6] * d[15] * d[22] + 2 * d[4] * d[7] * d[15] * d[22] + d[5] * d[8] * d[15] * d[22] + 2 * d[4] * d[6] * d[16] * d[22] - 2 * d[3] * d[7] * d[16] * d[22] + d[5] * d[6] * d[17] * d[22] - d[7] * d[8] * d[12] * d[23] + d[6] * d[8] * d[13] * d[23] + d[4] * d[8] * d[15] * d[23] - d[3] * d[8] * d[16] * d[23] + d[4] * d[6] * d[17] * d[23] - d[3] * d[7] * d[17] * d[23] + 2 * d[1] * d[6] * d[9] * d[24] - 2 * d[0] * d[7] * d[9] * d[24] + 2 * d[0] * d[6] * d[10] * d[24] + 2 * d[1] * d[7] * d[10] * d[24] + d[2] * d[8] * d[10] * d[24] + d[1] * d[8] * d[11] * d[24] + 2 * d[4] * d[6] * d[12] * d[24] - 2 * d[3] * d[7] * d[12] * d[24] + 2 * d[3] * d[6] * d[13] * d[24] + 2 * d[4] * d[7] * d[13] * d[24] + d[5] * d[8] * d[13] * d[24] + d[4] * d[8] * d[14] * d[24] + 2 * d[0] * d[1] * d[15] * d[24] + 2 * d[3] * d[4] * d[15] * d[24] - std::pow(d[0], 2) * d[16] * d[24] + std::pow(d[1], 2) * d[16] * d[24] - std::pow(d[3], 2) * d[16] * d[24] + std::pow(d[4], 2) * d[16] * d[24] + d[1] * d[2] * d[17] * d[24] + d[4] * d[5] * d[17] * d[24] - 2 * d[0] * d[6] * d[9] * d[25] - 2 * d[1] * d[7] * d[9] * d[25] - d[2] * d[8] * d[9] * d[25] + 2 * d[1] * d[6] * d[10] * d[25] - 2 * d[0] * d[7] * d[10] * d[25] - d[0] * d[8] * d[11] * d[25] - 2 * d[3] * d[6] * d[12] * d[25] - 2 * d[4] * d[7] * d[12] * d[25] - d[5] * d[8] * d[12] * d[25] + 2 * d[4] * d[6] * d[13] * d[25] - 2 * d[3] * d[7] * d[13] * d[25] - d[3] * d[8] * d[14] * d[25] - std::pow(d[0], 2) * d[15] * d[25] + std::pow(d[1], 2) * d[15] * d[25] - std::pow(d[3], 2) * d[15] * d[25] + std::pow(d[4], 2) * d[15] * d[25] - 2 * d[0] * d[1] * d[16] * d[25] - 2 * d[3] * d[4] * d[16] * d[25] - d[0] * d[2] * d[17] * d[25] - d[3] * d[5] * d[17] * d[25] - d[2] * d[7] * d[9] * d[26] + d[2] * d[6] * d[10] * d[26] + d[1] * d[6] * d[11] * d[26] - d[0] * d[7] * d[11] * d[26] - d[5] * d[7] * d[12] * d[26] + d[5] * d[6] * d[13] * d[26] + d[4] * d[6] * d[14] * d[26] - d[3] * d[7] * d[14] * d[26] + d[1] * d[2] * d[15] * d[26] + d[4] * d[5] * d[15] * d[26] - d[0] * d[2] * d[16] * d[26] - d[3] * d[5] * d[16] * d[26];
				coeffs[47] = -2 * d[7] * d[9] * d[15] * d[18] + 2 * d[6] * d[10] * d[15] * d[18] + d[1] * std::pow(d[15], 2) * d[18] - 2 * d[6] * d[9] * d[16] * d[18] - 2 * d[7] * d[10] * d[16] * d[18] - d[8] * d[11] * d[16] * d[18] - 2 * d[0] * d[15] * d[16] * d[18] - d[1] * std::pow(d[16], 2) * d[18] - d[7] * d[11] * d[17] * d[18] - d[2] * d[16] * d[17] * d[18] + 2 * d[6] * d[9] * d[15] * d[19] + 2 * d[7] * d[10] * d[15] * d[19] + d[8] * d[11] * d[15] * d[19] + d[0] * std::pow(d[15], 2) * d[19] - 2 * d[7] * d[9] * d[16] * d[19] + 2 * d[6] * d[10] * d[16] * d[19] + 2 * d[1] * d[15] * d[16] * d[19] - d[0] * std::pow(d[16], 2) * d[19] + d[6] * d[11] * d[17] * d[19] + d[2] * d[15] * d[17] * d[19] + d[8] * d[10] * d[15] * d[20] - d[8] * d[9] * d[16] * d[20] - d[7] * d[9] * d[17] * d[20] + d[6] * d[10] * d[17] * d[20] + d[1] * d[15] * d[17] * d[20] - d[0] * d[16] * d[17] * d[20] - 2 * d[7] * d[12] * d[15] * d[21] + 2 * d[6] * d[13] * d[15] * d[21] + d[4] * std::pow(d[15], 2) * d[21] - 2 * d[6] * d[12] * d[16] * d[21] - 2 * d[7] * d[13] * d[16] * d[21] - d[8] * d[14] * d[16] * d[21] - 2 * d[3] * d[15] * d[16] * d[21] - d[4] * std::pow(d[16], 2) * d[21] - d[7] * d[14] * d[17] * d[21] - d[5] * d[16] * d[17] * d[21] + 2 * d[6] * d[12] * d[15] * d[22] + 2 * d[7] * d[13] * d[15] * d[22] + d[8] * d[14] * d[15] * d[22] + d[3] * std::pow(d[15], 2) * d[22] - 2 * d[7] * d[12] * d[16] * d[22] + 2 * d[6] * d[13] * d[16] * d[22] + 2 * d[4] * d[15] * d[16] * d[22] - d[3] * std::pow(d[16], 2) * d[22] + d[6] * d[14] * d[17] * d[22] + d[5] * d[15] * d[17] * d[22] + d[8] * d[13] * d[15] * d[23] - d[8] * d[12] * d[16] * d[23] - d[7] * d[12] * d[17] * d[23] + d[6] * d[13] * d[17] * d[23] + d[4] * d[15] * d[17] * d[23] - d[3] * d[16] * d[17] * d[23] - d[7] * std::pow(d[9], 2) * d[24] + 2 * d[6] * d[9] * d[10] * d[24] + d[7] * std::pow(d[10], 2) * d[24] + d[8] * d[10] * d[11] * d[24] - d[7] * std::pow(d[12], 2) * d[24] + 2 * d[6] * d[12] * d[13] * d[24] + d[7] * std::pow(d[13], 2) * d[24] + d[8] * d[13] * d[14] * d[24] + 2 * d[1] * d[9] * d[15] * d[24] + 2 * d[0] * d[10] * d[15] * d[24] + 2 * d[4] * d[12] * d[15] * d[24] + 2 * d[3] * d[13] * d[15] * d[24] - 2 * d[0] * d[9] * d[16] * d[24] + 2 * d[1] * d[10] * d[16] * d[24] - 2 * d[3] * d[12] * d[16] * d[24] + 2 * d[4] * d[13] * d[16] * d[24] + d[2] * d[10] * d[17] * d[24] + d[1] * d[11] * d[17] * d[24] + d[5] * d[13] * d[17] * d[24] + d[4] * d[14] * d[17] * d[24] - d[6] * std::pow(d[9], 2) * d[25] - 2 * d[7] * d[9] * d[10] * d[25] + d[6] * std::pow(d[10], 2) * d[25] - d[8] * d[9] * d[11] * d[25] - d[6] * std::pow(d[12], 2) * d[25] - 2 * d[7] * d[12] * d[13] * d[25] + d[6] * std::pow(d[13], 2) * d[25] - d[8] * d[12] * d[14] * d[25] - 2 * d[0] * d[9] * d[15] * d[25] + 2 * d[1] * d[10] * d[15] * d[25] - 2 * d[3] * d[12] * d[15] * d[25] + 2 * d[4] * d[13] * d[15] * d[25] - 2 * d[1] * d[9] * d[16] * d[25] - 2 * d[0] * d[10] * d[16] * d[25] - 2 * d[4] * d[12] * d[16] * d[25] - 2 * d[3] * d[13] * d[16] * d[25] - d[2] * d[9] * d[17] * d[25] - d[0] * d[11] * d[17] * d[25] - d[5] * d[12] * d[17] * d[25] - d[3] * d[14] * d[17] * d[25] - d[7] * d[9] * d[11] * d[26] + d[6] * d[10] * d[11] * d[26] - d[7] * d[12] * d[14] * d[26] + d[6] * d[13] * d[14] * d[26] + d[2] * d[10] * d[15] * d[26] + d[1] * d[11] * d[15] * d[26] + d[5] * d[13] * d[15] * d[26] + d[4] * d[14] * d[15] * d[26] - d[2] * d[9] * d[16] * d[26] - d[0] * d[11] * d[16] * d[26] - d[5] * d[12] * d[16] * d[26] - d[3] * d[14] * d[16] * d[26];
				coeffs[48] = d[10] * std::pow(d[15], 2) * d[18] - 2 * d[9] * d[15] * d[16] * d[18] - d[10] * std::pow(d[16], 2) * d[18] - d[11] * d[16] * d[17] * d[18] + d[9] * std::pow(d[15], 2) * d[19] + 2 * d[10] * d[15] * d[16] * d[19] - d[9] * std::pow(d[16], 2) * d[19] + d[11] * d[15] * d[17] * d[19] + d[10] * d[15] * d[17] * d[20] - d[9] * d[16] * d[17] * d[20] + d[13] * std::pow(d[15], 2) * d[21] - 2 * d[12] * d[15] * d[16] * d[21] - d[13] * std::pow(d[16], 2) * d[21] - d[14] * d[16] * d[17] * d[21] + d[12] * std::pow(d[15], 2) * d[22] + 2 * d[13] * d[15] * d[16] * d[22] - d[12] * std::pow(d[16], 2) * d[22] + d[14] * d[15] * d[17] * d[22] + d[13] * d[15] * d[17] * d[23] - d[12] * d[16] * d[17] * d[23] + 2 * d[9] * d[10] * d[15] * d[24] + 2 * d[12] * d[13] * d[15] * d[24] - std::pow(d[9], 2) * d[16] * d[24] + std::pow(d[10], 2) * d[16] * d[24] - std::pow(d[12], 2) * d[16] * d[24] + std::pow(d[13], 2) * d[16] * d[24] + d[10] * d[11] * d[17] * d[24] + d[13] * d[14] * d[17] * d[24] - std::pow(d[9], 2) * d[15] * d[25] + std::pow(d[10], 2) * d[15] * d[25] - std::pow(d[12], 2) * d[15] * d[25] + std::pow(d[13], 2) * d[15] * d[25] - 2 * d[9] * d[10] * d[16] * d[25] - 2 * d[12] * d[13] * d[16] * d[25] - d[9] * d[11] * d[17] * d[25] - d[12] * d[14] * d[17] * d[25] + d[10] * d[11] * d[15] * d[26] + d[13] * d[14] * d[15] * d[26] - d[9] * d[11] * d[16] * d[26] - d[12] * d[14] * d[16] * d[26];
				coeffs[49] = -d[6] * d[7] * std::pow(d[18], 2) + std::pow(d[6], 2) * d[18] * d[19] - std::pow(d[7], 2) * d[18] * d[19] + d[6] * d[7] * std::pow(d[19], 2) - d[7] * d[8] * d[18] * d[20] + d[6] * d[8] * d[19] * d[20] - d[6] * d[7] * std::pow(d[21], 2) + std::pow(d[6], 2) * d[21] * d[22] - std::pow(d[7], 2) * d[21] * d[22] + d[6] * d[7] * std::pow(d[22], 2) - d[7] * d[8] * d[21] * d[23] + d[6] * d[8] * d[22] * d[23] + 2 * d[1] * d[6] * d[18] * d[24] - 2 * d[0] * d[7] * d[18] * d[24] + 2 * d[0] * d[6] * d[19] * d[24] + 2 * d[1] * d[7] * d[19] * d[24] + d[2] * d[8] * d[19] * d[24] + d[1] * d[8] * d[20] * d[24] + 2 * d[4] * d[6] * d[21] * d[24] - 2 * d[3] * d[7] * d[21] * d[24] + 2 * d[3] * d[6] * d[22] * d[24] + 2 * d[4] * d[7] * d[22] * d[24] + d[5] * d[8] * d[22] * d[24] + d[4] * d[8] * d[23] * d[24] + d[0] * d[1] * std::pow(d[24], 2) + d[3] * d[4] * std::pow(d[24], 2) - 2 * d[0] * d[6] * d[18] * d[25] - 2 * d[1] * d[7] * d[18] * d[25] - d[2] * d[8] * d[18] * d[25] + 2 * d[1] * d[6] * d[19] * d[25] - 2 * d[0] * d[7] * d[19] * d[25] - d[0] * d[8] * d[20] * d[25] - 2 * d[3] * d[6] * d[21] * d[25] - 2 * d[4] * d[7] * d[21] * d[25] - d[5] * d[8] * d[21] * d[25] + 2 * d[4] * d[6] * d[22] * d[25] - 2 * d[3] * d[7] * d[22] * d[25] - d[3] * d[8] * d[23] * d[25] - std::pow(d[0], 2) * d[24] * d[25] + std::pow(d[1], 2) * d[24] * d[25] - std::pow(d[3], 2) * d[24] * d[25] + std::pow(d[4], 2) * d[24] * d[25] - d[0] * d[1] * std::pow(d[25], 2) - d[3] * d[4] * std::pow(d[25], 2) - d[2] * d[7] * d[18] * d[26] + d[2] * d[6] * d[19] * d[26] + d[1] * d[6] * d[20] * d[26] - d[0] * d[7] * d[20] * d[26] - d[5] * d[7] * d[21] * d[26] + d[5] * d[6] * d[22] * d[26] + d[4] * d[6] * d[23] * d[26] - d[3] * d[7] * d[23] * d[26] + d[1] * d[2] * d[24] * d[26] + d[4] * d[5] * d[24] * d[26] - d[0] * d[2] * d[25] * d[26] - d[3] * d[5] * d[25] * d[26];
				coeffs[50] = -d[7] * d[15] * std::pow(d[18], 2) - d[6] * d[16] * std::pow(d[18], 2) + 2 * d[6] * d[15] * d[18] * d[19] - 2 * d[7] * d[16] * d[18] * d[19] + d[7] * d[15] * std::pow(d[19], 2) + d[6] * d[16] * std::pow(d[19], 2) - d[8] * d[16] * d[18] * d[20] - d[7] * d[17] * d[18] * d[20] + d[8] * d[15] * d[19] * d[20] + d[6] * d[17] * d[19] * d[20] - d[7] * d[15] * std::pow(d[21], 2) - d[6] * d[16] * std::pow(d[21], 2) + 2 * d[6] * d[15] * d[21] * d[22] - 2 * d[7] * d[16] * d[21] * d[22] + d[7] * d[15] * std::pow(d[22], 2) + d[6] * d[16] * std::pow(d[22], 2) - d[8] * d[16] * d[21] * d[23] - d[7] * d[17] * d[21] * d[23] + d[8] * d[15] * d[22] * d[23] + d[6] * d[17] * d[22] * d[23] - 2 * d[7] * d[9] * d[18] * d[24] + 2 * d[6] * d[10] * d[18] * d[24] + 2 * d[1] * d[15] * d[18] * d[24] - 2 * d[0] * d[16] * d[18] * d[24] + 2 * d[6] * d[9] * d[19] * d[24] + 2 * d[7] * d[10] * d[19] * d[24] + d[8] * d[11] * d[19] * d[24] + 2 * d[0] * d[15] * d[19] * d[24] + 2 * d[1] * d[16] * d[19] * d[24] + d[2] * d[17] * d[19] * d[24] + d[8] * d[10] * d[20] * d[24] + d[1] * d[17] * d[20] * d[24] - 2 * d[7] * d[12] * d[21] * d[24] + 2 * d[6] * d[13] * d[21] * d[24] + 2 * d[4] * d[15] * d[21] * d[24] - 2 * d[3] * d[16] * d[21] * d[24] + 2 * d[6] * d[12] * d[22] * d[24] + 2 * d[7] * d[13] * d[22] * d[24] + d[8] * d[14] * d[22] * d[24] + 2 * d[3] * d[15] * d[22] * d[24] + 2 * d[4] * d[16] * d[22] * d[24] + d[5] * d[17] * d[22] * d[24] + d[8] * d[13] * d[23] * d[24] + d[4] * d[17] * d[23] * d[24] + d[1] * d[9] * std::pow(d[24], 2) + d[0] * d[10] * std::pow(d[24], 2) + d[4] * d[12] * std::pow(d[24], 2) + d[3] * d[13] * std::pow(d[24], 2) - 2 * d[6] * d[9] * d[18] * d[25] - 2 * d[7] * d[10] * d[18] * d[25] - d[8] * d[11] * d[18] * d[25] - 2 * d[0] * d[15] * d[18] * d[25] - 2 * d[1] * d[16] * d[18] * d[25] - d[2] * d[17] * d[18] * d[25] - 2 * d[7] * d[9] * d[19] * d[25] + 2 * d[6] * d[10] * d[19] * d[25] + 2 * d[1] * d[15] * d[19] * d[25] - 2 * d[0] * d[16] * d[19] * d[25] - d[8] * d[9] * d[20] * d[25] - d[0] * d[17] * d[20] * d[25] - 2 * d[6] * d[12] * d[21] * d[25] - 2 * d[7] * d[13] * d[21] * d[25] - d[8] * d[14] * d[21] * d[25] - 2 * d[3] * d[15] * d[21] * d[25] - 2 * d[4] * d[16] * d[21] * d[25] - d[5] * d[17] * d[21] * d[25] - 2 * d[7] * d[12] * d[22] * d[25] + 2 * d[6] * d[13] * d[22] * d[25] + 2 * d[4] * d[15] * d[22] * d[25] - 2 * d[3] * d[16] * d[22] * d[25] - d[8] * d[12] * d[23] * d[25] - d[3] * d[17] * d[23] * d[25] - 2 * d[0] * d[9] * d[24] * d[25] + 2 * d[1] * d[10] * d[24] * d[25] - 2 * d[3] * d[12] * d[24] * d[25] + 2 * d[4] * d[13] * d[24] * d[25] - d[1] * d[9] * std::pow(d[25], 2) - d[0] * d[10] * std::pow(d[25], 2) - d[4] * d[12] * std::pow(d[25], 2) - d[3] * d[13] * std::pow(d[25], 2) - d[7] * d[11] * d[18] * d[26] - d[2] * d[16] * d[18] * d[26] + d[6] * d[11] * d[19] * d[26] + d[2] * d[15] * d[19] * d[26] - d[7] * d[9] * d[20] * d[26] + d[6] * d[10] * d[20] * d[26] + d[1] * d[15] * d[20] * d[26] - d[0] * d[16] * d[20] * d[26] - d[7] * d[14] * d[21] * d[26] - d[5] * d[16] * d[21] * d[26] + d[6] * d[14] * d[22] * d[26] + d[5] * d[15] * d[22] * d[26] - d[7] * d[12] * d[23] * d[26] + d[6] * d[13] * d[23] * d[26] + d[4] * d[15] * d[23] * d[26] - d[3] * d[16] * d[23] * d[26] + d[2] * d[10] * d[24] * d[26] + d[1] * d[11] * d[24] * d[26] + d[5] * d[13] * d[24] * d[26] + d[4] * d[14] * d[24] * d[26] - d[2] * d[9] * d[25] * d[26] - d[0] * d[11] * d[25] * d[26] - d[5] * d[12] * d[25] * d[26] - d[3] * d[14] * d[25] * d[26];
				coeffs[51] = -d[15] * d[16] * std::pow(d[18], 2) + std::pow(d[15], 2) * d[18] * d[19] - std::pow(d[16], 2) * d[18] * d[19] + d[15] * d[16] * std::pow(d[19], 2) - d[16] * d[17] * d[18] * d[20] + d[15] * d[17] * d[19] * d[20] - d[15] * d[16] * std::pow(d[21], 2) + std::pow(d[15], 2) * d[21] * d[22] - std::pow(d[16], 2) * d[21] * d[22] + d[15] * d[16] * std::pow(d[22], 2) - d[16] * d[17] * d[21] * d[23] + d[15] * d[17] * d[22] * d[23] + 2 * d[10] * d[15] * d[18] * d[24] - 2 * d[9] * d[16] * d[18] * d[24] + 2 * d[9] * d[15] * d[19] * d[24] + 2 * d[10] * d[16] * d[19] * d[24] + d[11] * d[17] * d[19] * d[24] + d[10] * d[17] * d[20] * d[24] + 2 * d[13] * d[15] * d[21] * d[24] - 2 * d[12] * d[16] * d[21] * d[24] + 2 * d[12] * d[15] * d[22] * d[24] + 2 * d[13] * d[16] * d[22] * d[24] + d[14] * d[17] * d[22] * d[24] + d[13] * d[17] * d[23] * d[24] + d[9] * d[10] * std::pow(d[24], 2) + d[12] * d[13] * std::pow(d[24], 2) - 2 * d[9] * d[15] * d[18] * d[25] - 2 * d[10] * d[16] * d[18] * d[25] - d[11] * d[17] * d[18] * d[25] + 2 * d[10] * d[15] * d[19] * d[25] - 2 * d[9] * d[16] * d[19] * d[25] - d[9] * d[17] * d[20] * d[25] - 2 * d[12] * d[15] * d[21] * d[25] - 2 * d[13] * d[16] * d[21] * d[25] - d[14] * d[17] * d[21] * d[25] + 2 * d[13] * d[15] * d[22] * d[25] - 2 * d[12] * d[16] * d[22] * d[25] - d[12] * d[17] * d[23] * d[25] - std::pow(d[9], 2) * d[24] * d[25] + std::pow(d[10], 2) * d[24] * d[25] - std::pow(d[12], 2) * d[24] * d[25] + std::pow(d[13], 2) * d[24] * d[25] - d[9] * d[10] * std::pow(d[25], 2) - d[12] * d[13] * std::pow(d[25], 2) - d[11] * d[16] * d[18] * d[26] + d[11] * d[15] * d[19] * d[26] + d[10] * d[15] * d[20] * d[26] - d[9] * d[16] * d[20] * d[26] - d[14] * d[16] * d[21] * d[26] + d[14] * d[15] * d[22] * d[26] + d[13] * d[15] * d[23] * d[26] - d[12] * d[16] * d[23] * d[26] + d[10] * d[11] * d[24] * d[26] + d[13] * d[14] * d[24] * d[26] - d[9] * d[11] * d[25] * d[26] - d[12] * d[14] * d[25] * d[26];
				coeffs[52] = -d[7] * std::pow(d[18], 2) * d[24] + 2 * d[6] * d[18] * d[19] * d[24] + d[7] * std::pow(d[19], 2) * d[24] + d[8] * d[19] * d[20] * d[24] - d[7] * std::pow(d[21], 2) * d[24] + 2 * d[6] * d[21] * d[22] * d[24] + d[7] * std::pow(d[22], 2) * d[24] + d[8] * d[22] * d[23] * d[24] + d[1] * d[18] * std::pow(d[24], 2) + d[0] * d[19] * std::pow(d[24], 2) + d[4] * d[21] * std::pow(d[24], 2) + d[3] * d[22] * std::pow(d[24], 2) - d[6] * std::pow(d[18], 2) * d[25] - 2 * d[7] * d[18] * d[19] * d[25] + d[6] * std::pow(d[19], 2) * d[25] - d[8] * d[18] * d[20] * d[25] - d[6] * std::pow(d[21], 2) * d[25] - 2 * d[7] * d[21] * d[22] * d[25] + d[6] * std::pow(d[22], 2) * d[25] - d[8] * d[21] * d[23] * d[25] - 2 * d[0] * d[18] * d[24] * d[25] + 2 * d[1] * d[19] * d[24] * d[25] - 2 * d[3] * d[21] * d[24] * d[25] + 2 * d[4] * d[22] * d[24] * d[25] - d[1] * d[18] * std::pow(d[25], 2) - d[0] * d[19] * std::pow(d[25], 2) - d[4] * d[21] * std::pow(d[25], 2) - d[3] * d[22] * std::pow(d[25], 2) - d[7] * d[18] * d[20] * d[26] + d[6] * d[19] * d[20] * d[26] - d[7] * d[21] * d[23] * d[26] + d[6] * d[22] * d[23] * d[26] + d[2] * d[19] * d[24] * d[26] + d[1] * d[20] * d[24] * d[26] + d[5] * d[22] * d[24] * d[26] + d[4] * d[23] * d[24] * d[26] - d[2] * d[18] * d[25] * d[26] - d[0] * d[20] * d[25] * d[26] - d[5] * d[21] * d[25] * d[26] - d[3] * d[23] * d[25] * d[26];
				coeffs[53] = -d[16] * std::pow(d[18], 2) * d[24] + 2 * d[15] * d[18] * d[19] * d[24] + d[16] * std::pow(d[19], 2) * d[24] + d[17] * d[19] * d[20] * d[24] - d[16] * std::pow(d[21], 2) * d[24] + 2 * d[15] * d[21] * d[22] * d[24] + d[16] * std::pow(d[22], 2) * d[24] + d[17] * d[22] * d[23] * d[24] + d[10] * d[18] * std::pow(d[24], 2) + d[9] * d[19] * std::pow(d[24], 2) + d[13] * d[21] * std::pow(d[24], 2) + d[12] * d[22] * std::pow(d[24], 2) - d[15] * std::pow(d[18], 2) * d[25] - 2 * d[16] * d[18] * d[19] * d[25] + d[15] * std::pow(d[19], 2) * d[25] - d[17] * d[18] * d[20] * d[25] - d[15] * std::pow(d[21], 2) * d[25] - 2 * d[16] * d[21] * d[22] * d[25] + d[15] * std::pow(d[22], 2) * d[25] - d[17] * d[21] * d[23] * d[25] - 2 * d[9] * d[18] * d[24] * d[25] + 2 * d[10] * d[19] * d[24] * d[25] - 2 * d[12] * d[21] * d[24] * d[25] + 2 * d[13] * d[22] * d[24] * d[25] - d[10] * d[18] * std::pow(d[25], 2) - d[9] * d[19] * std::pow(d[25], 2) - d[13] * d[21] * std::pow(d[25], 2) - d[12] * d[22] * std::pow(d[25], 2) - d[16] * d[18] * d[20] * d[26] + d[15] * d[19] * d[20] * d[26] - d[16] * d[21] * d[23] * d[26] + d[15] * d[22] * d[23] * d[26] + d[11] * d[19] * d[24] * d[26] + d[10] * d[20] * d[24] * d[26] + d[14] * d[22] * d[24] * d[26] + d[13] * d[23] * d[24] * d[26] - d[11] * d[18] * d[25] * d[26] - d[9] * d[20] * d[25] * d[26] - d[14] * d[21] * d[25] * d[26] - d[12] * d[23] * d[25] * d[26];
				coeffs[54] = d[18] * d[19] * std::pow(d[24], 2) + d[21] * d[22] * std::pow(d[24], 2) - std::pow(d[18], 2) * d[24] * d[25] + std::pow(d[19], 2) * d[24] * d[25] - std::pow(d[21], 2) * d[24] * d[25] + std::pow(d[22], 2) * d[24] * d[25] - d[18] * d[19] * std::pow(d[25], 2) - d[21] * d[22] * std::pow(d[25], 2) + d[19] * d[20] * d[24] * d[26] + d[22] * d[23] * d[24] * d[26] - d[18] * d[20] * d[25] * d[26] - d[21] * d[23] * d[25] * d[26];

				static const int coeffs_ind[] = {0, 10, 25, 40, 1, 0, 11, 26, 41, 4, 0, 15, 30, 45, 2, 1, 12, 27, 42, 3, 2, 13, 28, 43, 3, 14, 29, 44, 9, 24, 39, 54, 9, 7, 22, 37, 52, 7, 4, 19, 34, 49, 5, 4, 1, 16, 31, 46, 8, 7,
												 5, 20, 35, 50, 6, 5, 2, 17, 32, 47, 9, 8, 23, 38, 53, 8, 6, 21, 36, 51, 6, 3, 18, 33, 48};

				static const int C_ind[] = {0, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
											62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89};

				Eigen::MatrixXd C = Eigen::MatrixXd::Zero(6, 15);
				for (int i = 0; i < 75; i++)
				{
					C(C_ind[i]) = coeffs(coeffs_ind[i]);
				}

				Eigen::MatrixXd C0 = C.leftCols(6);
				Eigen::MatrixXd C1 = C.rightCols(9);
				Eigen::MatrixXd C12 = C0.fullPivLu().solve(C1);
				Eigen::MatrixXd RR(12, 9);
				RR << -C12.bottomRows(3), Eigen::MatrixXd::Identity(9, 9);

				static const int AM_ind[] = {9, 7, 6, 0, 8, 1, 10, 11, 2};
				MatrixXd AM(9, 9);
				for (int i = 0; i < 9; i++)
				{
					AM.row(i) = RR.row(AM_ind[i]);
				}

				EigenSolver<MatrixXd> es(AM);
				ArrayXcd D = es.eigenvalues();
				ArrayXXcd V = es.eigenvectors();
				V = (V / V.row(0).replicate(9, 1)).eval();

				MatrixXcd sols(2, 9);
				sols.row(0) = V.row(1);
				sols.row(1) = D.transpose();
				return sols;
			}

		}
	}
}